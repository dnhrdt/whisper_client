Directory structure:
└── dariox1337-whisper-writer/
    ├── README.md
    ├── DESIGN.md
    ├── LICENSE
    ├── list_audio_devices.py
    ├── requirements.txt
    ├── requirements_clean.txt
    ├── run.py
    ├── assets/
    ├── scripts/
    │   ├── add_trailing_space.py
    │   ├── capitalize.py
    │   └── remove_punctuation.py
    └── src/
        ├── application_controller.py
        ├── audio_manager.py
        ├── config_manager.py
        ├── config_schema.yaml
        ├── enums.py
        ├── event_bus.py
        ├── input_manager.py
        ├── main.py
        ├── output_manager.py
        ├── play_wav.py
        ├── post_processing.py
        ├── post_processing_base.py
        ├── profile.py
        ├── transcription_manager.py
        ├── input_backend/
        │   ├── evdev_backend.py
        │   ├── input_backend_base.py
        │   └── pynput_backend.py
        ├── transcription_backend/
        │   ├── faster_whisper_backend.py
        │   ├── openai_backend.py
        │   ├── transcription_backend_base.py
        │   └── vosk_backend.py
        └── ui/
            ├── base_window.py
            ├── main_window.py
            ├── settings_window.py
            ├── status_window.py
            ├── tray_icon.py
            └── ui_manager.py

================================================
File: README.md
================================================
# <img src="./assets/ww-logo.png" alt="WhisperWriter icon" width="25" height="25"> WhisperWriter

![version](https://img.shields.io/badge/version-1.0.1-blue)

<p align="center">
    <img src="./assets/ww-demo-image-02.gif" alt="WhisperWriter demo gif" width="340" height="136">
</p>

WhisperWriter is a versatile speech-to-text application that leverages multiple transcription backends, including [OpenAI's Whisper model](https://openai.com/research/whisper), [Faster Whisper](https://github.com/SYSTRAN/faster-whisper/), and [VOSK](https://alphacephei.com/vosk/) to automatically transcribe audio from your microphone to the active window or other configurable outputs.

### Key Features

- **Multiple Profiles**: Configure and switch between different transcription setups on-the-fly.
- **Flexible Backends**: Support for local (Faster Whisper, VOSK) and API-based (OpenAI) transcription.
- **Customizable Shortcuts**: Each profile can have its own activation shortcut.
- **Various Recording Modes**: Choose from continuous, voice activity detection, press-to-toggle, or hold-to-record modes.
- **Post-Processing**: Apply customizable post-processing scripts to refine transcription output.
- **Multiple Output Methods**: Write to active window or implement new output handlers.
- **Streaming Support**: Faster Whisper and VOSK backends support real-time transcription for immediate feedback.

### How It Works

WhisperWriter runs in the background, waiting for configured keyboard shortcuts. When a shortcut is pressed, the corresponding profile is activated, initiating the following process:

1. **Recording**: Audio is captured from the specified input device.
2. **Transcription**: The audio is processed by the configured backend.
3. **Post-Processing**: The transcribed text undergoes any specified post-processing steps.
4. **Output**: The final text is sent to the configured output method (e.g., typed into the active window).

A status window can optionally display the current stage of the process.

For more detailed information about the application's architecture and components, please refer to the [Design Document](DESIGN.md).

### Recording Modes

- **Continuous**: Records and transcribes continuously until the shortcut is pressed again.
- **Voice Activity Detection**: Stops recording after a pause in speech.
- **Press-to-Toggle**: Starts/stops recording with each shortcut press.
- **Hold-to-Record**: Records only while the shortcut is held down.

Refer to the [Configuration Options](#configuration-options) section for detailed settings.

WhisperWriter's modular design allows for easy extension with new backends, input methods, and output handlers to suit a wide range of use cases.


## Getting Started

### Prerequisites
Before you can run this app, you'll need to have the following software installed:

- Git: [https://git-scm.com/downloads](https://git-scm.com/downloads)
- Python `3.12`: [https://www.python.org/downloads/](https://www.python.org/downloads/)

If you want to run `faster-whisper` on your GPU, you'll also need to install the following NVIDIA libraries:

- [cuBLAS for CUDA 12](https://developer.nvidia.com/cublas)
- [cuDNN 8 for CUDA 12](https://developer.nvidia.com/cudnn)

<details>
<summary>More information on GPU execution</summary>

The below was taken directly from the [`faster-whisper` README](https://github.com/SYSTRAN/faster-whisper?tab=readme-ov-file#gpu):

**Note:** The latest versions of `ctranslate2` support CUDA 12 only. For CUDA 11, the current workaround is downgrading to the `3.24.0` version of `ctranslate2` (This can be done with `pip install --force-reinsall ctranslate2==3.24.0`).

There are multiple ways to install the NVIDIA libraries mentioned above. The recommended way is described in the official NVIDIA documentation, but we also suggest other installation methods below.

#### Use Docker

The libraries (cuBLAS, cuDNN) are installed in these official NVIDIA CUDA Docker images: `nvidia/cuda:12.0.0-runtime-ubuntu20.04` or `nvidia/cuda:12.0.0-runtime-ubuntu22.04`.

#### Install with `pip` (Linux only)

On Linux these libraries can be installed with `pip`. Note that `LD_LIBRARY_PATH` must be set before launching Python.

```bash
pip install nvidia-cublas-cu12 nvidia-cudnn-cu12

export LD_LIBRARY_PATH=`python3 -c 'import os; import nvidia.cublas.lib; import nvidia.cudnn.lib; print(os.path.dirname(nvidia.cublas.lib.__file__) + ":" + os.path.dirname(nvidia.cudnn.lib.__file__))'`
```

**Note**: Version 9+ of `nvidia-cudnn-cu12` appears to cause issues due its reliance on cuDNN 9 (Faster-Whisper does not currently support cuDNN 9). Ensure your version of the Python package is for cuDNN 8.

#### Download the libraries from Purfview's repository (Windows & Linux)

Purfview's [whisper-standalone-win](https://github.com/Purfview/whisper-standalone-win) provides the required NVIDIA libraries for Windows & Linux in a [single archive](https://github.com/Purfview/whisper-standalone-win/releases/tag/libs). Decompress the archive and place the libraries in a directory included in the `PATH`.

</details>

### Installation
To set up and run the project, follow these steps:

#### 1. Clone the repository:

```
git clone https://github.com/dariox1337/whisper-writer
cd whisper-writer
```

#### 2. Create a virtual environment and activate it:

```
python -m venv venv

# For Linux and macOS:
source venv/bin/activate

# For Windows:
venv\Scripts\activate
```

#### 3. Install the required packages:

Base packages:
```
pip install -r requirements.txt
```

The following packages are optional.

Transcription backends (you need at least one):
```
# For local Whisper models
pip install faster-whisper==1.0.3

# For cloud Whisper models, using OpenAI API
pip install openai==1.44.1

# For local VOSK models
pip install vosk==0.3.45
```

Input backend for Linux (if you don't have it installed system-wide):
```
pip install evdev
```


#### 4. Run the Python code:

```
python run.py
```

#### 5. Configure and start WhisperWriter:
On first run, a Settings window should appear. Once configured and saved, another window will open. Press "Start" to activate the keyboard listener. Press the activation key (`ctrl+shift+space` by default) to start recording and transcribing to the active window.


### Configuration Options

WhisperWriter uses a configuration file to customize its behaviour. To set up the configuration, open the Settings window:

<p align="center">
    <img src="./assets/ww-settings-demo.gif" alt="WhisperWriter Settings window demo gif" width="350" height="350">
</p>

### Global Options

These options apply to all profiles:

- `active_profiles`: List of active profiles. (Default: `[Default]`)
- `input_backend`: The input backend for detecting key presses. Options: `auto`, `evdev`, `pynput`. (Default: `auto`)
- `print_to_terminal`: Print script status and transcribed text to the terminal. (Default: `true`)
- `status_update_mode`: Choose how to display status updates. 'None' disables all updates, 'Window' shows a status window, and 'Notification' uses desktop notifications. (Default: `Window`)
- `noise_on_completion`: Play a noise after transcription is typed out. (Default: `false`)

### Profile Options

Each profile has the following configurable options:

- `name`: The name of the profile. (Default: `Default`)
- `activation_key`: Keyboard shortcut to activate this profile. Separate keys with '+'. (Default: `ctrl+shift+space`)
- `backend_type`: Transcription backend to use. Options: `faster_whisper`, `openai`. (Default: `faster_whisper`)

#### Recording Options

- `sound_device`: The numeric index of the sound device to use for recording. Run `python list_audio_devices.py` to to find device numbers. (Default: `null`)
- `sample_rate`: Sample rate in Hz for recording. (Default: `16000`)
- `recording_mode`: Recording mode to use. Options: `continuous`, `voice_activity_detection`, `press_to_toggle`, `hold_to_record`. (Default: `continuous`)
- `silence_duration`: Duration in milliseconds to wait for silence before stopping recording. (Default: `900`)
- `min_duration`: Minimum duration in milliseconds for a recording to be processed. (Default: `100`)
- `save_debug_audio`: Save recorded audio to files for debugging purposes. (Default: `false`)

#### Post-processing Options

- `writing_key_press_delay`: Delay in seconds between each key press when writing transcribed text. (Default: `0.005`)
- `keyboard_simulator`: Method for simulating keyboard input. Options: `pynput`, `ydotool`, `dotool`. (Default: `pynput`)
- `enabled_scripts`: List of post-processing scripts to apply (in order). (Default: `[]`)

### Backend-specific Options

#### Faster Whisper

- `model`: Model to use for transcription. Options: `tiny`, `tiny.en`, `base`, `base.en`, `small`, `small.en`, `medium`, `medium.en`, `large`, `large-v1`, `large-v2`, `large-v3`. (Default: `base`)
- `compute_type`: Compute type for the local Whisper model. Options: `default`, `float32`, `float16`, `int8`. (Default: `default`)
- `device`: Device to run the local Whisper model on. Options: `auto`, `cuda`, `cpu`. (Default: `auto`)
- `model_path`: Path to the folder containing model files. Leave empty to use online models. (Default: `null`)
- `vad_filter`: Use voice activity detection (VAD) filter to remove silence. (Default: `true`)
- `condition_on_previous_text`: Use previously transcribed text as a prompt for the next transcription. (Default: `true`)
- `temperature`: Controls randomness of transcription output. Lower values make output more focused and deterministic. (Default: `0.0`)
- `initial_prompt`: String used as an initial prompt to condition the transcription. (Default: `null`)
- `use_streaming`: If true, use streaming mode with partial results. If false, wait for complete audio before transcribing. It's recommended to enable VAD filter when using streaming because otherwise Whisper will hallucinate words in silent moments. VAD is also used for utterance detection in this mode.
- `min_transcription_interval`: Streaming Only: Specifies the minimum time interval (in seconds) between consecutive transcription processes to allow for the accumulation of audio data. This determines the minimal theoretical latency, which doesn't take in account transcription time. Values lower than 0.2 are rounded to 0.2. (Default: `0.5`)
- `vad_silence_duration`: Streaming Only: Defines the duration (in seconds) of silence detected by voice activity detection (VAD) that triggers the end of an utterance and resets the transcription buffer. (Default: `2.0`)

#### OpenAI

- `model`: Model to use for transcription. Currently only `whisper-1` is available. (Default: `whisper-1`)
- `base_url`: Base URL for the API. Can be changed to use a local API endpoint. (Default: `https://api.openai.com/v1`)
- `api_key`: Your API key for the OpenAI API. Required for API usage. (Default: `null`)
- `temperature`: Controls randomness of transcription output. Lower values make output more focused and deterministic. (Default: `0.0`)
- `initial_prompt`: String used as an initial prompt to condition the transcription. (Default: `null`)

#### VOSK

- `model_path`: Path to the folder containing the Vosk model files. Default is 'model' in the current directory.
- `sample_rate`: Sample rate of the audio input. Vosk models are typically trained on 16kHz audio.
- `use_streaming`: If true, use streaming mode with partial results. If false, wait for complete audio before transcribing.

## Known Issues

### 1. Shortcut Interference with Output

**Issue:** Shortcuts can interfere with the application's output, potentially causing unintended effects in the target application.

**Examples:**
- Holding "Shift" during output results in capitalized text.
- Holding "Ctrl" while the app types "v" may trigger a paste command in the target application.

**Workarounds:**
a) Use Continuous or Voice Activity Detection (VAD) modes to minimize shortcut holding during typing.
b) Choose shortcuts carefully, especially for "Press to Toggle" or "Hold to Record" modes.
c) Test shortcuts by holding them down while typing to check for conflicts.
d) Consider using mouse buttons (e.g., mouse_forward, mouse_back) for "Hold to Record" mode.

**Technical Explanation:** Current typing simulation methods create virtual keyboards, which are indistinguishable from physical keyboards at the display server level. This makes it impossible for user applications to differentiate between virtual and physical keyboard inputs.

**Potential Future Solution:** Developing an Input Method module for ibus or fcitx could overcome this limitation, as these frameworks operate above the display server level.

### 2. Status Window Focus Issues on Wayland

**Issue:** The status window grabs focus and interferes with output when using the Wayland display server.

**Workaround:** Consider using desktop notifications or disabling status updates by choosing the corresponding option in "Status update mode" in the settings.

### General Recommendations

1. Carefully select and test shortcuts to minimize conflicts with your typical workflow and applications.
2. Be aware of the limitations when using "Press to Toggle" or "Hold to Record" modes, especially with streaming transcription.
3. On Wayland systems, consider operating without the status window for smoother performance.

You can see all reported issues and their current status in our [Issue Tracker](https://github.com/savbell/whisper-writer/issues). If you encounter a problem, please [open a new issue](https://github.com/savbell/whisper-writer/issues/new) with a detailed description and reproduction steps, if possible.

## Roadmap
Below are features I am planning to add in the near future:
- [x] Add streaming transcription for Whisper backend
- [x] Upgrade to Qt6.
- [ ] Create an IME module for output
- [ ] Additional post-processing options:
  - [ ] Simple word replacement (e.g. "gonna" -> "going to" or "smiley face" -> "😊")
  - [ ] Using GPT for instructional post-processing
- [ ] Creating standalone executable file

Implemented features can be found in the [CHANGELOG](CHANGELOG.md).

## Contributing

Contributions are welcome! I created this project for my own personal use and didn't expect it to get much attention, so I haven't put much effort into testing or making it easy for others to contribute. If you have ideas or suggestions, feel free to [open a pull request](https://github.com/savbell/whisper-writer/pulls) or [create a new issue](https://github.com/savbell/whisper-writer/issues/new). I'll do my best to review and respond as time allows.

## Credits

- [OpenAI](https://openai.com/) for creating the Whisper model and providing the API. Plus [ChatGPT](https://chat.openai.com/), which was used to write a lot of the initial code for this project.
- [Guillaume Klein](https://github.com/guillaumekln) for creating the [faster-whisper Python package](https://github.com/SYSTRAN/faster-whisper).
- All of our [contributors](https://github.com/savbell/whisper-writer/graphs/contributors)!

## License

This project is licensed under the GNU General Public License. See the [LICENSE](LICENSE) file for details.


================================================
File: DESIGN.md
================================================

## 1. Core Components:

   a. AudioManager:
      - Manages its own thread, running for the duration of the program
      - Handles audio recording based on triggered shortcuts and recording modes
      - Supports both streaming and non-streaming modes
      - In streaming mode, continuously emits small audio chunks (e.g., 200ms) to a queue
      - In non-streaming mode, collects all audio before sending it to the queue
      - Uses sentinel values in the audio queue to signify the end of audio data
      - Uses session IDs to identify and manage individual recording sessions
      - Implements voice activity detection (VAD) for certain recording modes

   b. Profile:
      - Encapsulates related components and settings:
        - TranscriptionManager: Handles transcription for a specific backend, manages its own thread
        - PostProcessor: Applies post-processing to transcribed text
        - OutputManager: Handles output operations specific to the profile
        - StreamingResultHandler: Manages streaming results (for streaming mode only)
      - Associated with a specific activation shortcut
      - Maintains its state (IDLE, RECORDING, TRANSCRIBING)
      - Configurable for streaming or non-streaming transcription mode
      - Handles all result processing internally

   c. InputManager:
      - Runs on the main thread
      - Handles all input events (keyboard shortcuts, GUI interactions)
      - Maps shortcuts to specific profiles

   d. ConfigManager:
      - Manages global options and profile-specific configurations
      - Supports dynamic configuration updates
      - Implemented as a static class with class methods

   e. UIManager:
      - Manages all UI components:
        - MainWindow: Displayed only at program launch for initial setup
        - SettingsWindow: Accessible via tray icon menu for configuration
        - StatusWindow: Optional window that appears during recording and transcription
        - TrayIconManager: Manages the system tray icon and its menu
      - Handles UI-related logic and user interactions
      - Encapsulates all Qt-specific code except for EventBus

## 2. Main Application Flow:

   a. ApplicationController:
      - Runs on the main thread
      - Central coordinator for all core components
      - Manages the lifecycle of the application and profiles
      - Handles high-level logic for different operation modes (streaming and non-streaming)
      - Manages session IDs for each recording/transcription job
      - Activates/deactivates recording based on shortcuts and session IDs
      - Handles transcription completion and audio discarding events

## 3. Communication and Event Handling:

   a. EventBus:
      - Central event system for inter-component communication
      - Uses Qt signals to ensure events are processed on the main thread
      - Provides subscribe/unsubscribe functionality for event handling

   b. Queue:
      - Python's built-in Queue class is used, which is thread-safe by design
      - A separate queue is created for each profile to manage audio data
      - Used for passing audio data between AudioManager and TranscriptionManager within a profile

## 4. Threading Model:

   a. Main Thread:
      - Runs ApplicationController, InputManager, UIManager
      - Manages configuration changes and event routing
      - Processes all events emitted through EventBus

   b. Audio Thread:
      - Managed internally by AudioManager
      - Runs for the duration of the program
      - In streaming mode, continuously sends audio chunks to the queue
      - In non-streaming mode, sends complete audio data to the queue after recording finishes

   c. Transcription Threads:
      - Each TranscriptionManager manages its own thread
      - Run for the duration of their respective profiles
      - In streaming mode, continuously process incoming audio chunks
      - In non-streaming mode, process complete audio data after recording finishes

## 5. Session Management:

   - Each recording/transcription job is assigned a unique session ID (UUID)
   - Session IDs are used to track the lifecycle of each job from recording through transcription
   - ApplicationController maintains a mapping between session IDs and profiles
   - AudioManager and TranscriptionManager use session IDs to manage concurrent jobs

## 6. Workflow:

   1. Program launches, creates QApplication instance
   2. main() initializes UIManager, EventBus, ConfigManager, and ApplicationController
   3. UIManager displays MainWindow for initial setup
   4. After setup, MainWindow closes and TrayIconManager creates system tray icon
   5. ApplicationController initializes AudioManager, InputManager, and profiles based on configuration
   6. Profile(s) initializes its TranscriptionManager, OutputManager, and StreamingResultHandler (if in streaming mode)
   7. Audio and Transcription threads are started and run continuously
   8. InputManager listens for configured shortcuts
   9. When a shortcut is triggered, InputManager notifies ApplicationController via EventBus
   10. ApplicationController identifies the corresponding profile
   11. ApplicationController generates a new session ID and starts recording via AudioManager
   12. UIManager shows/updates StatusWindow if enabled
   13. AudioManager sends audio data to the profile's queue, either in chunks (streaming) or complete (non-streaming)
   14. TranscriptionManager processes audio from the profile's queue, using sentinel values to detect the end of audio data
   15. TranscriptionManager sends raw results to the Profile
   16. Profile processes the results:
       - Applies post-processing
       - For streaming mode: uses StreamingResultHandler to manage partial results and output
       - For non-streaming mode: outputs the complete result
   17. Profile manages its own state transitions and output
   18. Profile notifies ApplicationController when transcription is complete
   19. ApplicationController handles session cleanup and manages continuous recording if configured
   20. UIManager updates with partial results in streaming mode, or final results in non-streaming mode
   21. UIManager hides StatusWindow when processing is complete (if enabled)

## 7. Design Considerations:

   - Clear separation of concerns with Profile handling its own PostProcessor, OutputManager, and StreamingResultHandler
   - Profile manages its own state transitions and result processing, reducing ApplicationController involvement
   - Session IDs (UUIDs) provide a robust way to manage multiple concurrent recording/transcription jobs
   - Streaming and non-streaming modes are handled differently within the Profile class
   - ApplicationController focuses on high-level coordination and session management
   - Separate queues are created per profile to avoid ambiguity in audio data routing
   - UIManager provides a clean separation between UI logic and application logic
   - Qt dependencies are isolated within UIManager and EventBus
   - Use of EventBus for high-level communication and state changes, ensuring thread-safe event processing
   - Careful management of thread synchronization using Python's built-in thread-safe Queue
   - Dynamic configuration updates without requiring application restart
   - Support for both streaming and non-streaming transcription modes, configurable per profile
   - Implementation of voice activity detection (VAD) for certain recording modes
   - Potential for future expansion to support more complex scenarios or multiple simultaneous active profiles
   - Use of sentinel values in audio queues to simplify audio processing and state management in TranscriptionManager


================================================
File: LICENSE
================================================
                    GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU General Public License is a free, copyleft license for
software and other kinds of works.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

  Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

  For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

  Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

  Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

    <program>  Copyright (C) <year>  <name of author>
    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, your program's commands
might be different; for a GUI interface, you would use an "about box".

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
<https://www.gnu.org/licenses/>.

  The GNU General Public License does not permit incorporating your program
into proprietary programs.  If your program is a subroutine library, you
may consider it more useful to permit linking proprietary applications with
the library.  If this is what you want to do, use the GNU Lesser General
Public License instead of this License.  But first, please read
<https://www.gnu.org/licenses/why-not-lgpl.html>.


================================================
File: list_audio_devices.py
================================================
import pyaudio


def list_audio_devices():
    p = pyaudio.PyAudio()

    print("Available audio devices:")
    print("------------------------")

    # Get the default input and output device indices
    default_input = p.get_default_input_device_info()['index']
    default_output = p.get_default_output_device_info()['index']

    # Iterate through all available audio devices
    for i in range(p.get_device_count()):
        dev_info = p.get_device_info_by_index(i)

        # Create a string to indicate if it's a default device
        default_str = ""
        if i == default_input:
            default_str = " (Default Input)"
        elif i == default_output:
            default_str = " (Default Output)"

        # Print device information
        print(f"Index {i}: {dev_info['name']}{default_str}")
        print(f"    Host API: {p.get_host_api_info_by_index(dev_info['hostApi'])['name']}")
        print(f"    Max Input Channels: {dev_info['maxInputChannels']}")
        print(f"    Max Output Channels: {dev_info['maxOutputChannels']}")
        print(f"    Default Sample Rate: {dev_info['defaultSampleRate']} Hz")
        print()

    p.terminate()


if __name__ == "__main__":
    list_audio_devices()


================================================
File: requirements.txt
================================================
cffi==1.17.1
evdev==1.7.1
numpy==2.1.1
PyAudio==0.2.14
pycparser==2.22
pynput==1.7.7
PyQt6==6.7.1
PyQt6-Qt6==6.7.2
PyQt6_sip==13.8.0
python-xlib==0.33
PyYAML==6.0.2
scipy==1.14.1
setuptools==74.1.2
six==1.16.0
soundfile==0.12.1
webrtcvad==2.0.10


================================================
File: requirements_clean.txt
================================================
PyQt6
numpy
scipy
pyaudio
pynput
soundfile
webrtcvad
setuptools  # Required by webrtcvad
pyyaml

# Optional dependencies
# openai
# faster-whisper
# vosk
# evdev


================================================
File: run.py
================================================
import os
import sys
import subprocess


def load_env(env_file='.env'):
    if os.path.exists(env_file):
        with open(env_file, 'r') as file:
            for line in file:
                line = line.strip()
                if line and not line.startswith('#'):
                    key, value = line.split('=', 1)
                    key = key.strip()
                    value = value.strip()

                    # Remove quotes if present
                    if (value.startswith("'") and value.endswith("'")) or \
                       (value.startswith('"') and value.endswith('"')):
                        value = value[1:-1]

                    # Expand environment variables in the value
                    value = os.path.expandvars(value)

                    os.environ[key] = value


print('Starting WhisperWriter...')

# Load environment variables
load_env()

# Run the main script
subprocess.run([sys.executable, os.path.join('src', 'main.py')])


================================================
File: scripts/add_trailing_space.py
================================================
from post_processing_base import PostProcessor
from typing import Dict

# The 'transcription' dictionary typically contains:
# - 'raw_text': The unprocessed transcription text.
# - 'processed': The post-processed transcription text.
# - 'is_utterance_end': Boolean indicating if this is the end of an utterance.
# - 'language': Detected or specified language of the audio.
# - 'error': Any error message (None if no error occurred).


class Processor(PostProcessor):
    def process(self, transcription: Dict) -> Dict:
        text = transcription['processed']
        processed_text = text + ' ' if text else ''
        transcription['processed'] = processed_text
        return transcription


================================================
File: scripts/capitalize.py
================================================
from post_processing_base import PostProcessor
from typing import Dict


class Processor(PostProcessor):
    def process(self, transcription: Dict) -> Dict:
        text = transcription['processed']
        processed_text = text.capitalize()
        transcription['processed'] = processed_text
        return transcription


================================================
File: scripts/remove_punctuation.py
================================================
import string
from post_processing_base import PostProcessor
from typing import Dict


class Processor(PostProcessor):
    def process(self, transcription: Dict) -> Dict:
        text = transcription['processed']
        processed_text = text.translate(str.maketrans('', '', string.punctuation))
        transcription['processed'] = processed_text
        return transcription


================================================
File: src/application_controller.py
================================================
import uuid
import os
from queue import Queue
from typing import Dict, Optional

from audio_manager import AudioManager
from input_manager import InputManager
from enums import RecordingMode
from profile import Profile
from config_manager import ConfigManager
from play_wav import play_wav


class ApplicationController:
    """
    Central coordinator for the application, managing core components and orchestrating
    the overall workflow.

    Responsible for initializing and managing profiles, coordinating audio recording and
    transcription processes, handling user input events, and managing application state
    transitions. Acts as a bridge between various components, handles session management,
    and ensures proper cleanup of resources. Manages the lifecycle of recording sessions
    across different profiles and modes of operation.
    """
    def __init__(self, ui_manager, event_bus):
        """Initialize the ApplicationController with UI manager and event bus."""
        self.ui_manager = ui_manager
        self.event_bus = event_bus
        self.audio_queue = Queue()
        self.listening = False
        self.audio_manager = None
        self.input_manager = None
        self.manually_stopped_profiles = set()  # For tracking continuous mode profiles

        self.active_profiles: Dict[str, Profile] = {}
        self.session_profile_map: Dict[str, str] = {}

        self.load_active_profiles()
        self.setup_connections()

    def load_active_profiles(self):
        """Load and initialize active profiles from configuration."""
        active_profiles = ConfigManager.get_profiles(active_only=True)
        for profile in active_profiles:
            profile_name = profile['name']
            profile_obj = Profile(profile_name, self.event_bus)
            self.active_profiles[profile_name] = profile_obj

    def setup_connections(self):
        """Set up event subscriptions for various application events."""
        self.event_bus.subscribe("start_listening", self.handle_start_listening)
        self.event_bus.subscribe("shortcut_triggered", self.handle_shortcut)
        self.event_bus.subscribe("audio_discarded", self.handle_audio_discarded)
        self.event_bus.subscribe("recording_stopped", self.handle_recording_stopped)
        self.event_bus.subscribe("transcription_complete", self.handle_transcription_complete)
        self.event_bus.subscribe("config_changed", self.handle_config_change)
        self.event_bus.subscribe("close_app", self.close_application)

    def handle_shortcut(self, profile_name: str, event_type: str):
        """Handle shortcut events for starting or stopping recording."""
        profile = self.active_profiles.get(profile_name)
        if profile:
            if event_type == "press":
                if profile.should_start_on_press():
                    self.start_recording(profile)
                elif profile.should_stop_on_press():
                    self.stop_recording(profile)
                    if profile.recording_mode == RecordingMode.CONTINUOUS:
                        self.manually_stopped_profiles.add(profile.name)
            elif event_type == "release":
                if profile.should_stop_on_release():
                    self.stop_recording(profile)

    def start_recording(self, profile: Profile):
        """Start recording for a given profile."""
        if profile.is_idle() and not self.audio_manager.is_recording():
            session_id = str(uuid.uuid4())
            self.session_profile_map[session_id] = profile.name
            self.audio_manager.start_recording(profile, session_id)
            profile.start_transcription(session_id)
            self.manually_stopped_profiles.discard(profile.name)
        else:
            ConfigManager.log_print("Profile or audio thread is busy.")

    def stop_recording(self, profile: Profile):
        """Stop recording for a given profile."""
        if profile.is_recording():
            self.audio_manager.stop_recording()
            profile.recording_stopped()

    def handle_recording_stopped(self, session_id: str):
        """Handle cases when audio stopped automatically in VAD and CONTINUOUS modes"""
        profile = self._get_profile_for_session(session_id)
        if profile:
            self.stop_recording(profile)

    def handle_audio_discarded(self, session_id: str):
        """Handle cases where recorded audio is discarded."""
        profile = self._get_profile_for_session(session_id)
        if profile:
            profile.finish_transcription()  # This will emit "transcription_complete" event

    def handle_transcription_complete(self, session_id: str):
        """Handle the completion of a transcription session."""
        profile = self._get_profile_for_session(session_id)
        if profile:
            del self.session_profile_map[session_id]
            # Play beep sound
            if ConfigManager.get_value('global_options.noise_on_completion', False):
                beep_file = os.path.join('assets', 'beep.wav')
                play_wav(beep_file)

            if (profile.recording_mode == RecordingMode.CONTINUOUS and
                    profile.name not in self.manually_stopped_profiles):
                self.start_recording(profile)
            else:
                self.manually_stopped_profiles.discard(profile.name)

    def handle_start_listening(self):
        """Initialize core components when the application starts listening."""
        self.listening = True
        self.start_core_components()

    def handle_config_change(self):
        """Handle configuration changes by reloading profiles and restarting components."""
        self.cleanup()
        self.load_active_profiles()
        if self.listening:
            self.start_core_components()

    def run(self):
        """Run the main application loop and return the exit code."""
        self.ui_manager.show_main_window()
        exit_code = self.ui_manager.run_event_loop()  # Run QT event loop
        self.cleanup()
        return exit_code

    def start_core_components(self):
        """Initialize and start core components like InputManager and AudioManager."""
        self.ui_manager.status_update_mode = ConfigManager.get_value(
            'global_options.status_update_mode')
        self.input_manager = InputManager(self.event_bus)
        self.audio_manager = AudioManager(self.event_bus)
        self.input_manager.start()
        self.audio_manager.start()

        initialization_error = None
        for profile in self.active_profiles.values():
            try:
                profile.transcription_manager.start()
            except RuntimeError as e:
                initialization_error = str(e)
                ConfigManager.log_print(f"Failed to start transcription manager for "
                                        f"profile {profile.name}.\n{initialization_error}")
                break

        if initialization_error:
            self.cleanup()
            self.listening = False
            error_message = (f"Failed to initialize transcription backend.\n"
                             f"{initialization_error}\nPlease check your settings.")
            self.ui_manager.show_settings_with_error(error_message)
        else:
            self.event_bus.emit("initialization_successful")

    def close_application(self):
        """Initiate the application closing process."""
        self.event_bus.emit("quit_application")

    def cleanup(self):
        """Clean up resources and stop all components before application exit."""
        # Stop and cleanup audio-related components
        if self.audio_manager:
            self.audio_manager.stop_recording()
            self.audio_manager.cleanup()
            self.audio_manager = None

        # Ensure all active sessions are properly closed
        for session_id in list(self.session_profile_map.keys()):
            self.handle_transcription_complete(session_id)

        # Stop and cleanup all active profiles
        for profile in self.active_profiles.values():
            profile.cleanup()

        # Clear the active profiles and session profile map
        self.active_profiles.clear()
        self.session_profile_map.clear()

        # Stop and cleanup input manager
        if self.input_manager:
            self.input_manager.cleanup()
            self.input_manager = None

    def _get_profile_for_session(self, session_id: str) -> Optional[Profile]:
        """Get the profile associated with a given session ID."""
        if session_id in self.session_profile_map:
            profile_name = self.session_profile_map[session_id]
            return self.active_profiles.get(profile_name)
        return None


================================================
File: src/audio_manager.py
================================================
import threading
import numpy as np
import pyaudio
import webrtcvad
import wave
import os
import datetime
from collections import namedtuple
from queue import Queue, Empty

from config_manager import ConfigManager
from event_bus import EventBus
from enums import RecordingMode, AudioManagerState
from profile import Profile

RecordingContext = namedtuple('RecordingContext', ['profile', 'session_id'])


class AudioManager:
    def __init__(self, event_bus: EventBus):
        self.event_bus = event_bus
        self.state = AudioManagerState.STOPPED
        self.recording_queue = Queue()
        self.thread = None
        self.pyaudio = pyaudio.PyAudio()
        self.debug_recording_dir = 'debug_audio'
        os.makedirs(self.debug_recording_dir, exist_ok=True)

    def start(self):
        if self.state == AudioManagerState.STOPPED:
            self.state = AudioManagerState.IDLE
            self.thread = threading.Thread(target=self._audio_thread)
            self.thread.start()

    def stop(self):
        if self.state != AudioManagerState.STOPPED:
            self.state = AudioManagerState.STOPPED
            self.recording_queue.put(None)  # Sentinel value to stop the thread
            if self.thread:
                self.thread.join(timeout=2)
                if self.thread.is_alive():
                    ConfigManager.log_print("Warning: Audio thread did not terminate gracefully.")
        self.pyaudio.terminate()

    def start_recording(self, profile: Profile, session_id: str):
        self.recording_queue.put(RecordingContext(profile, session_id))

    def stop_recording(self):
        self.recording_queue.put(None)  # Sentinel value to stop current recording

    def is_recording(self):
        return self.state == AudioManagerState.RECORDING

    def _audio_thread(self):
        while self.state != AudioManagerState.STOPPED:
            try:
                context = self.recording_queue.get(timeout=0.2)
                if context is None:
                    continue  # Skip this iteration, effectively stopping the current recording
                self.state = AudioManagerState.RECORDING
                self._record_audio(context)
                if self.state != AudioManagerState.STOPPED:
                    self.state = AudioManagerState.IDLE
            except Empty:
                continue

    def _record_audio(self, context: RecordingContext):
        recording_options = ConfigManager.get_section('recording_options', context.profile.name)
        audio_config = self._prepare_audio_config(context, recording_options)

        stream = self._setup_audio_stream(audio_config)
        debug_wav_file = (self._setup_debug_file(context, audio_config) if
                          audio_config['save_debug_audio'] else None)

        try:
            recording, speech_detected = self._capture_audio(context, audio_config,
                                                             stream, debug_wav_file)
        finally:
            self._cleanup_audio_resources(stream, debug_wav_file)

        if not context.profile.is_streaming:
            self._process_non_streaming_audio(context, audio_config, recording, speech_detected)

        context.profile.audio_queue.put(None)  # Push sentinel value

        # Notify ApplicationController of automatic termination due to silence detected by VAD
        if audio_config['use_vad'] and self.state != AudioManagerState.STOPPED:
            self.event_bus.emit("recording_stopped", context.session_id)

    def _prepare_audio_config(self, context: RecordingContext, recording_options):
        sample_rate = recording_options.get('sample_rate', 16000)
        streaming_chunk_size = context.profile.streaming_chunk_size or 4096
        frame_size = self._calculate_frame_size(sample_rate, streaming_chunk_size,
                                                context.profile.is_streaming)
        silence_duration_ms = recording_options.get('silence_duration', 900)
        recording_mode = RecordingMode[recording_options.get('recording_mode',
                                                             'PRESS_TO_TOGGLE').upper()]

        return {
            'sample_rate': sample_rate,
            'gain': recording_options.get('gain', 1.0),
            'channels': 1,
            'streaming_chunk_size': streaming_chunk_size,
            'frame_size': frame_size,
            'silence_frames': int(silence_duration_ms / (frame_size / sample_rate * 1000)),
            'sound_device': self._get_sound_device(recording_options.get('sound_device')),
            'save_debug_audio': recording_options.get('save_debug_audio', False),
            'use_vad': recording_mode in (RecordingMode.VOICE_ACTIVITY_DETECTION,
                                          RecordingMode.CONTINUOUS)
        }

    def _setup_audio_stream(self, audio_config):
        return self.pyaudio.open(format=pyaudio.paFloat32,
                                 channels=audio_config['channels'],
                                 rate=audio_config['sample_rate'],
                                 input=True,
                                 input_device_index=audio_config['sound_device'],
                                 frames_per_buffer=audio_config['frame_size'])

    def _setup_debug_file(self, context, audio_config):
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{context.profile.name}_{timestamp}.wav"
        debug_wav_file = wave.open(os.path.join(self.debug_recording_dir, filename), 'wb')
        debug_wav_file.setnchannels(audio_config['channels'])
        debug_wav_file.setsampwidth(2)  # 16-bit audio
        debug_wav_file.setframerate(audio_config['sample_rate'])
        return debug_wav_file

    def _capture_audio(self, context, audio_config, stream, debug_wav_file):
        recording = []
        silent_frame_count = 0
        speech_detected = False
        sample_rate = audio_config['sample_rate']
        # Skip running VAD for the initial 0.15 seconds to avoid mistaking keyboard noise for voice
        initial_frames_to_skip = int(0.15 * sample_rate / audio_config['frame_size'])
        vad = webrtcvad.Vad(2) if audio_config['use_vad'] else None

        while self.state != AudioManagerState.STOPPED and self.recording_queue.empty():
            frame = stream.read(audio_config['frame_size'])
            frame_array = self._process_audio_frame(frame, audio_config['gain'])
            recording.extend(frame_array)

            if debug_wav_file:
                int16_frame = (frame_array * 32767).astype(np.int16)
                debug_wav_file.writeframes(int16_frame.tobytes())

            if context.profile.is_streaming:
                self._handle_streaming(context, audio_config, recording)

            if vad:
                if initial_frames_to_skip > 0:
                    initial_frames_to_skip -= 1
                    continue
                # Convert to int16 for VAD
                int16_frame = (frame_array * 32767).astype(np.int16)
                if vad.is_speech(int16_frame.tobytes(), sample_rate):
                    silent_frame_count = 0
                    if not speech_detected:
                        ConfigManager.log_print("Speech detected.")
                        speech_detected = True
                else:
                    silent_frame_count += 1

                if speech_detected and silent_frame_count > audio_config['silence_frames']:
                    break

        return recording, speech_detected

    def _handle_streaming(self, context, audio_config, recording):
        chunk_size = audio_config['streaming_chunk_size']
        sample_rate = audio_config['sample_rate']
        while len(recording) >= chunk_size:
            # Extract a full chunk
            chunk = np.array(recording[:chunk_size], dtype=np.float32)

            # Send the chunk for processing
            self._push_audio_chunk(context, chunk, sample_rate, audio_config['channels'])

            # Remove the processed chunk from the recording
            del recording[:chunk_size]
        # At this point, 'recording' contains less than a full chunk,
        # which will be processed in the next iteration

    def _cleanup_audio_resources(self, stream, debug_wav_file):
        stream.stop_stream()
        stream.close()
        if debug_wav_file:
            debug_wav_file.close()

    def _process_non_streaming_audio(self, context, audio_config, recording, speech_detected):
        audio_data = np.array(recording, dtype=np.float32)
        duration = len(audio_data) / audio_config['sample_rate']

        ConfigManager.log_print(f'Recording finished. Size: {audio_data.size} samples, '
                                f'Duration: {duration:.2f} seconds')

        min_duration_ms = ConfigManager.get_value(
            f'recording_options.{context.profile.name}.min_duration', 200)

        if audio_config['use_vad'] and not speech_detected:
            ConfigManager.log_print('Discarded because no speech has been detected.')
            self.event_bus.emit("audio_discarded", context.session_id)
        elif (duration * 1000) >= min_duration_ms:
            self._push_audio_chunk(context, audio_data,
                                   audio_config['sample_rate'], audio_config['channels'])
        else:
            ConfigManager.log_print('Discarded due to being too short.')
            self.event_bus.emit("audio_discarded", context.session_id)

    def _calculate_frame_size(self, sample_rate: int, streaming_chunk_size: int,
                              is_streaming: bool) -> int:
        if is_streaming:
            valid_frame_durations = [10, 20, 30]  # in milliseconds, accepted by webrtcvad
            for duration in sorted(valid_frame_durations, reverse=True):
                frame_size = int(sample_rate * (duration / 1000.0))
                if streaming_chunk_size % frame_size == 0:
                    return frame_size
            return int(sample_rate * 0.01)  # default to 10ms if no perfect divisor found
        else:
            return int(sample_rate * 0.03)  # 30ms for non-streaming

    def _get_sound_device(self, device):
        def get_default_input_device_index():
            return self.pyaudio.get_default_input_device_info()['index']

        def get_device_info(index):
            info = self.pyaudio.get_device_info_by_index(index)
            host_api = self.pyaudio.get_host_api_info_by_index(info['hostApi'])['name']
            return f"{info['name']} - {host_api}"

        if device == '' or device is None:
            default_index = get_default_input_device_index()
            device_info = get_device_info(default_index)
            ConfigManager.log_print(f"Using default input device: {device_info} "
                                    f"(index: {default_index})")
            return default_index

        try:
            device_index = int(device)
            device_info = get_device_info(device_index)
            ConfigManager.log_print(f"Using specified input device: {device_info} "
                                    f"(index: {device_index})")
            return device_index
        except (ValueError, IOError):
            ConfigManager.log_print(f"Invalid device index: {device}. Using default.")
            default_index = get_default_input_device_index()
            device_info = get_device_info(default_index)
            ConfigManager.log_print(f"Selected default input device: {device_info} "
                                    f"(index: {default_index})")
            return default_index

    def _process_audio_frame(self, frame: bytes, gain: float) -> np.ndarray:
        frame_array = np.frombuffer(frame, dtype=np.float32).copy()
        frame_array *= gain
        np.clip(frame_array, -1.0, 1.0, out=frame_array)
        return frame_array

    def _push_audio_chunk(self, context: RecordingContext, audio_data: np.ndarray,
                          sample_rate: int, channels: int):
        context.profile.audio_queue.put({
            'session_id': context.session_id,
            'sample_rate': sample_rate,
            'channels': channels,
            'language': 'auto',
            'audio_chunk': audio_data
        })

    def cleanup(self):
        self.stop()
        self.thread = None
        self.pyaudio = None
        self.recording_queue = None


================================================
File: src/config_manager.py
================================================
import yaml
import os
from typing import Any, Dict, List, Optional
from event_bus import EventBus


class ConfigValidator:
    @staticmethod
    def validate_and_update(config: Dict, schema: Dict) -> Dict:
        ConfigValidator._validate_section(config, schema, [])
        return config

    @staticmethod
    def _validate_section(config: Dict, schema: Dict, path: List[str]):
        for key, value in schema.items():
            if key == 'available_backends':
                continue  # Skip validating the available_backends section
            current_path = path + [key]
            if key not in config:
                print(f"Adding missing key: {'.'.join(current_path)}")
                config[key] = ConfigValidator._get_default_value(value)
            elif isinstance(value, dict) and 'value' not in value:
                if not isinstance(config[key], dict):
                    print(f"Replacing invalid value for {'.'.join(current_path)} with default")
                    config[key] = {}
                ConfigValidator._validate_section(config[key], value, current_path)
            elif key == 'backend':
                # Special handling for backend options
                backend_type = config.get('backend_type')
                if backend_type:
                    backend_schema = schema['available_backends'][backend_type]
                    ConfigValidator._validate_section(config[key], backend_schema, current_path)
            elif not ConfigValidator._validate_value(config[key], value):
                print(f"Replacing invalid value for {'.'.join(current_path)} with default")
                config[key] = ConfigValidator._get_default_value(value)

        keys_to_remove = [key for key in config if key not in schema and key != 'backend']
        for key in keys_to_remove:
            print(f"Removing spurious key: {'.'.join(path + [key])}")
            del config[key]

    @staticmethod
    def _validate_value(value: Any, schema: Dict) -> bool:
        if 'type' in schema:
            if schema['type'] == 'str' and not isinstance(value, str):
                return False
            elif schema['type'] == 'int' and not isinstance(value, int):
                return False
            elif schema['type'] == 'float' and not isinstance(value, (int, float)):
                return False
            elif schema['type'] == 'bool' and not isinstance(value, bool):
                return False
            elif schema['type'] == 'list' and not isinstance(value, list):
                return False
            elif schema['type'] == 'int or null' and not (isinstance(value, int) or value is None):
                return False
            elif schema['type'] == 'dir_path':
                return isinstance(value, str) and (value == '' or os.path.isdir(value))
        if 'options' in schema and value not in schema['options']:
            return False
        return True

    @staticmethod
    def _get_default_value(schema: Dict) -> Any:
        if 'value' in schema:
            return schema['value']
        elif schema.get('type') == 'str':
            return ''
        elif schema.get('type') == 'int':
            return 0
        elif schema.get('type') == 'float':
            return 0.0
        elif schema.get('type') == 'bool':
            return False
        elif schema.get('type') == 'list':
            return []
        elif schema.get('type') == 'int or null':
            return None
        else:
            return {}


class ConfigLoader:
    @staticmethod
    def load_yaml(file_path: str) -> Dict:
        try:
            with open(file_path, 'r') as file:
                return yaml.safe_load(file)
        except FileNotFoundError:
            return {}

    @staticmethod
    def save_yaml(data: Dict, file_path: str):
        with open(file_path, 'w') as file:
            yaml.dump(data, file, default_flow_style=False)


class ProfileManager:
    def __init__(self, config: Dict, schema: Dict):
        self.config = config
        self.schema = schema
        if 'profiles' not in self.config:
            self.config['profiles'] = []

    def get_profiles(self, active_only: bool = False) -> List[Dict]:
        all_profiles = self.config.get('profiles', [])
        if active_only:
            active_profile_names = self.config.get('global_options', {}).get('active_profiles', [])
            return [profile for profile in all_profiles if profile['name'] in active_profile_names]
        return all_profiles

    def create_profile(self, name: str = 'Default') -> Dict:
        unique_name = self._generate_unique_name(name)
        new_profile = {'name': unique_name}
        for key, schema_value in self.schema['profiles'][0].items():
            if key == 'backend_type':
                new_profile[key] = schema_value['value']
            elif key == 'backend':
                new_profile[key] = {}
            elif key != 'name':
                new_profile[key] = self._get_default_value_from_schema(schema_value)

        backend_type = new_profile['backend_type']
        if backend_type in self.schema['available_backends']:
            for option_key, option_value in self.schema['available_backends'][backend_type].items():
                new_profile['backend'][option_key] = self._get_default_value_from_schema(option_value)

        return new_profile

    def add_profile(self, name: str) -> Dict:
        new_profile = self.create_profile(name)
        if 'profiles' not in self.config:
            self.config['profiles'] = []
        self.config['profiles'].append(new_profile)
        return new_profile

    def delete_profile(self, name: str) -> bool:
        if len(self.config['profiles']) <= 1:
            return False  # Prevent deleting the last profile
        self.config['profiles'] = [p for p in self.config['profiles'] if p['name'] != name]
        active_profiles = self.config.get('global_options', {}).get('active_profiles', [])
        if name in active_profiles:
            active_profiles.remove(name)
        return True

    def rename_profile(self, old_name: str, new_name: str) -> bool:
        if old_name == new_name:
            return True
        if any(profile['name'] == new_name for profile in self.config['profiles']):
            return False
        for profile in self.config['profiles']:
            if profile['name'] == old_name:
                profile['name'] = new_name
                # Update active_profiles if necessary
                active_profiles = self.config.get('global_options', {}).get('active_profiles', [])
                if old_name in active_profiles:
                    active_profiles[active_profiles.index(old_name)] = new_name
                return True
        return False

    def _get_default_value_from_schema(self, schema_value: Dict) -> Any:
        if isinstance(schema_value, dict) and 'value' in schema_value:
            return schema_value['value']
        elif isinstance(schema_value, dict):
            # Create a section with nested defaults
            return {k: self._get_default_value_from_schema(v) for k, v in schema_value.items()}
        return None

    def _generate_unique_name(self, base_name: str) -> str:
        counter = 1
        new_name = base_name
        while any(profile['name'] == new_name for profile in self.config.get('profiles', [])):
            new_name = f"{base_name} ({counter})"
            counter += 1
        return new_name


class ConfigManager:
    _config: Dict = {}
    _schema: Dict = {}
    _profile_manager: Optional[ProfileManager] = None
    _event_bus: EventBus = None

    @classmethod
    def initialize(cls, event_bus: EventBus):
        cls._event_bus = event_bus
        cls._schema = ConfigLoader.load_yaml('src/config_schema.yaml')
        # Initialize with empty profiles list
        cls._profile_manager = ProfileManager({'profiles': []}, cls._schema)
        cls._config = cls._load_config()
        cls._validate_config()
        cls._profile_manager.config = cls._config  # Update ProfileManager with loaded config

    @classmethod
    def get_profiles(cls, active_only: bool = False) -> List[Dict]:
        return cls._profile_manager.get_profiles(active_only)

    @classmethod
    def rename_profile(cls, old_name: str, new_name: str) -> bool:
        return cls._profile_manager.rename_profile(old_name, new_name)

    @classmethod
    def create_profile(cls, name: str) -> Dict:
        unique_name = cls._profile_manager._generate_unique_name(name)
        return cls._profile_manager.add_profile(unique_name)

    @classmethod
    def delete_profile(cls, name: str) -> bool:
        return cls._profile_manager.delete_profile(name)

    @classmethod
    def get_section(cls, section_name: str, profile_name: Optional[str] = None) -> Dict:
        if profile_name:
            profile = next((p for p in cls._config['profiles'] if p['name'] == profile_name), None)
            if not profile:
                raise ValueError(f"Profile '{profile_name}' not found")
            if section_name == 'profiles':
                return profile
            else:
                return profile.get(section_name, {})
        return cls._config.get(section_name, {})

    @classmethod
    def get_value(cls, key: str, profile_name: Optional[str] = None) -> Any:
        keys = key.split('.')
        if profile_name or (keys[0] == 'profiles' and len(keys) > 1):
            if not profile_name:
                profile_name = keys[1]
                keys = keys[2:]
            profile = next((p for p in cls._config['profiles'] if p['name'] == profile_name), None)
            if not profile:
                raise ValueError(f"Profile '{profile_name}' not found")
            section = profile
        else:
            section = cls._config

        for k in keys:
            if isinstance(section, dict):
                section = section.get(k, None)
            else:
                return None
        return section

    @classmethod
    def set_value(cls, key: str, value: Any, profile_name: Optional[str] = None):
        keys = key.split('.')
        if profile_name or (keys[0] == 'profiles' and len(keys) > 1):
            if not profile_name:
                profile_name = keys[1]
                keys = keys[2:]
            profile = next((p for p in cls._config['profiles'] if p['name'] == profile_name), None)
            if not profile:
                raise ValueError(f"Profile '{profile_name}' not found")
            target = profile
        else:
            target = cls._config

        for k in keys[:-1]:
            if k not in target:
                target[k] = {}
            target = target[k]
        target[keys[-1]] = value

        if keys[-1] == 'backend_type':
            # When backend_type changes, reset the backend options
            backend_schema = cls._schema['available_backends'][value]
            target['backend'] = {k: v['value'] for k, v in backend_schema.items() if 'value' in v}

    @classmethod
    def get_schema_for_key(cls, key: str) -> Dict:
        schema = cls._schema
        parts = key.split('.')

        # Special handling for profiles
        if parts[0] == 'profiles':
            profile_schema = schema.get('profiles', [{}])[0]
            profile_name = parts[1]
            remaining_parts = parts[2:]

            # Handle backend options specially
            if remaining_parts[0] == 'backend' and len(remaining_parts) > 1:
                backend_type = cls.get_value(f"profiles.{profile_name}.backend_type")
                if backend_type:
                    backend_schema = cls._schema.get('available_backends',
                                                     {}).get(backend_type, {})
                    for part in remaining_parts[1:]:
                        backend_schema = backend_schema.get(part, {})
                    return backend_schema
            else:
                # Navigate through the profile schema
                for part in remaining_parts:
                    profile_schema = profile_schema.get(part, {})
                return profile_schema

        # For non-profile keys, navigate through the schema normally
        for part in parts:
            if isinstance(schema, dict):
                schema = schema.get(part, {})
            else:
                return {}

        return schema

    @classmethod
    def save_config(cls):
        ConfigLoader.save_yaml(cls._config, 'config.yaml')
        cls._event_bus.emit("config_changed")

    @classmethod
    def reload_config(cls):
        cls._config = cls._load_config()
        cls._validate_config()
        cls._profile_manager = ProfileManager(cls._config, cls._schema)

    @classmethod
    def log_print(cls, message: str):
        if cls._config.get('global_options', {}).get('print_to_terminal', False):
            print(message)

    @classmethod
    def _load_config(cls) -> Dict:
        config = ConfigLoader.load_yaml('config.yaml')
        if not config:
            config = cls._create_default_config()
            ConfigLoader.save_yaml(config, 'config.yaml')
        return config

    @classmethod
    def _create_default_config(cls) -> Dict:
        default_config = {'profiles': []}
        for section, content in cls._schema.items():
            if section == 'profiles':
                default_profile = cls._profile_manager.create_profile()
                default_config['profiles'].append(default_profile)
            elif section == 'available_backends':
                # Skip this section as it's not part of the actual config
                continue
            else:
                default_config[section] = cls._create_default_section(content)
        return default_config

    @classmethod
    def _create_default_section(cls, schema_section: Dict) -> Dict:
        section = {}
        for key, value in schema_section.items():
            if isinstance(value, dict) and 'value' in value:
                section[key] = value['value']
            elif isinstance(value, dict):
                if value.get('type') == 'int or null':
                    section[key] = None
                else:
                    section[key] = cls._create_default_section(value)
        return section

    @classmethod
    def _get_default_value_from_schema(cls, schema_value: Dict) -> Any:
        if isinstance(schema_value, dict) and 'value' in schema_value:
            return schema_value['value']
        elif isinstance(schema_value, dict):
            # Create a section with nested defaults
            return cls._create_default_section(schema_value)
        return None

    @classmethod
    def _validate_config(cls):
        cls._config = ConfigValidator.validate_and_update(cls._config, cls._schema)


================================================
File: src/config_schema.yaml
================================================
# Global options that apply to all profiles
global_options:
  active_profiles:
    value: [Default]
    type: list
    description: "List of active profiles."
  input_backend:
    value: auto
    type: str
    description: "The input backend to use for detecting key presses. 'auto' will try to use the best available backend."
    options:
      - auto
      - evdev
      - pynput
  print_to_terminal:
    value: true
    type: bool
    description: "Set to true to print various logging messages to the terminal."
  status_update_mode:
    value: Window
    type: str
    options:
      - None
      - Window
      - Notification
    description: "Choose how to display status updates. 'None' disables all updates, 'Window' shows a status window, and 'Notification' uses desktop notifications. The 'Window' mode might steal focus on its appearance when running under Wayland, preventing keyboard output."
  noise_on_completion:
    value: false
    type: bool
    description: "Set to true to play a noise after the transcription has been typed out."

# Profile definitions
profiles:
  - name:
      value: Default
      type: str
      description: "The name of the profile."
    activation_key:
      value: ctrl+shift+space
      type: str
      description: "The keyboard or mouse shortcut to activate this profile. Separate keys with a '+'.\nYou can find the full list of supported keys in enums.py -> KeyCode(Enum).\nNot all input backends support all keys.\nWarning: Check Known Issues in the readme!"
    backend_type:
      value: faster_whisper
      type: str
      description: "The transcription backend to use."
      options:
        - faster_whisper
        - openai
        - vosk
    backend:
      type: dict
      description: "Backend-specific options"
    recording_options:
      sound_device:
        value: null
        type: "int or null"
        description: "The numeric index of the sound device to use for recording. Run `python list_audio_devices.py` to to find device numbers."
      gain:
        value: 1.0
        type: float
        description: "Amplification factor for the recorded audio. Values greater than 1.0 increase volume, less than 1.0 decrease it. Use cautiously as high values may cause clipping. Default is 1.0 (no change)."
      sample_rate:
        value: 16000
        type: int
        description: "The sample rate in Hz to use for recording."
      recording_mode:
        value: continuous
        type: str
        description: "The recording mode to use."
        options:
          - continuous
          - voice_activity_detection
          - press_to_toggle
          - hold_to_record
      silence_duration:
        value: 900
        type: int
        description: "The duration in milliseconds to wait for silence before stopping the recording. This is relevant only for the continuous and voice_activity_detection modes."
      min_duration:
        value: 200
        type: int
        description: "The minimum duration in milliseconds for a recording to be processed. Recordings shorter than this will be discarded."
      save_debug_audio:
        value: false
        type: bool
        description: "Save recorded audio to files for debugging purposes."
    post_processing:
      writing_key_press_delay:
        value: 0.005
        type: float
        description: "The delay in seconds between each key press when writing the transcribed text. Too short of a delay can affect typing of shifted characters (e.g. capital letters, ?, !, etc.) in uinput mode."
      keyboard_simulator:
        value: pynput
        type: str
        description: "The method to use for simulating keyboard input.\npynput's support of Wayland is flawed.\nydotool and dotool require respective programs.\nuinput is the lightest (dependency-free) option."
        options:
          - pynput
          - ydotool
          - dotool
          - uinput
      enabled_scripts:
        value: []
        type: list
        description: "List of post-processing scripts to apply (in order). All scripts from the scripts folder will be displayed here. You can add new ones simply by coping add_trailing_space.py under a new name and editing it however you want."

# Available backend options
available_backends:
  faster_whisper:
    model:
      value: base
      type: str
      description: "The model to use for transcription. The larger models provide better accuracy but are slower."
      options:
        - tiny
        - tiny.en
        - base
        - base.en
        - small
        - small.en
        - medium
        - medium.en
        - large
        - large-v1
        - large-v2
        - large-v3
    compute_type:
      value: default
      type: str
      description: "The compute type to use for the local Whisper model."
      options:
        - default
        - float32
        - float16
        - int8
    device:
      value: auto
      type: str
      description: "The device to run the local Whisper model on. Use 'cuda' for NVIDIA GPUs, 'cpu' for CPU-only processing, or 'auto' to let the system automatically choose the best available device."
      options:
        - auto
        - cuda
        - cpu
    model_path:
      value: null
      type: dir_path
      description: "Path to the folder containing the model files. Leave empty to use online models."
    vad_filter:
      value: true
      type: bool
      description: "Set to true to use a voice activity detection (VAD) filter to remove silence from the recording."
    condition_on_previous_text:
      value: true
      type: bool
      description: "Set to true to use the previously transcribed text as a prompt for the next transcription request."
    temperature:
      value: 0.0
      type: float
      description: "Controls the randomness of the transcription output. Lower values make the output more focused and deterministic."
    initial_prompt:
      value: null
      type: str
      description: "A string used as an initial prompt to condition the transcription."
    use_streaming:
      value: false
      type: bool
      description: "If true, use streaming mode with partial results. If false, wait for complete audio before transcribing.\nIt's recommended to enable VAD filter when using streaming because otherwise Whisper will hallucinate words in silent moments. VAD is also used for utterance detection in this mode."
    min_transcription_interval:
      value: 0.5
      type: float
      description: "Streaming Only: Specifies the minimum time interval (in seconds) between consecutive transcription processes to allow for the accumulation of audio data. This determines the minimal theoretical latency, which doesn't take in account transcription time. Values lower than 0.2 are rounded to 0.2."
    vad_silence_duration:
      value: 2.0
      type: float
      description: "Streaming Only: Defines the duration (in seconds) of silence detected by voice activity detection (VAD) that triggers the end of an utterance and resets the transcription buffer."
  openai:
    model:
      value: whisper-1
      type: str
      description: "The model to use for transcription. Currently only 'whisper-1' is available."
      options:
        - whisper-1
    base_url:
      value: https://api.openai.com/v1
      type: str
      description: "The base URL for the API. Can be changed to use a local API endpoint."
    api_key:
      value: null
      type: str
      description: "Your API key for the OpenAI API. Required for API usage."
    temperature:
      value: 0.0
      type: float
      description: "Controls the randomness of the transcription output. Lower values make the output more focused and deterministic."
    initial_prompt:
      value: null
      type: str
      description: "A string used as an initial prompt to condition the transcription."
  vosk:
    model_path:
      value: "./model"
      type: dir_path
      description: "Path to the folder containing the Vosk model files. Default is 'model' in the current directory."
    sample_rate:
      value: 16000
      type: int
      description: "Sample rate of the audio input. Vosk models are typically trained on 16kHz audio."
      options:
        - 8000
        - 16000
        - 22050
        - 44100
        - 48000
    use_streaming:
      value: false
      type: bool
      description: "If true, use streaming mode with partial results. If false, wait for complete audio before transcribing."


================================================
File: src/enums.py
================================================
from enum import Enum, auto


class RecordingMode(Enum):
    CONTINUOUS = 1
    VOICE_ACTIVITY_DETECTION = 2
    PRESS_TO_TOGGLE = 3
    HOLD_TO_RECORD = 4


class ProfileState(Enum):
    IDLE = 0
    RECORDING = 1
    TRANSCRIBING = 2


class AudioManagerState(Enum):
    STOPPED = 0
    IDLE = 1
    RECORDING = 2


class InputEvent(Enum):
    KEY_PRESS = auto()
    KEY_RELEASE = auto()
    MOUSE_PRESS = auto()
    MOUSE_RELEASE = auto()


class KeyCode(Enum):
    # Modifier keys
    CTRL_LEFT = auto()
    CTRL_RIGHT = auto()
    SHIFT_LEFT = auto()
    SHIFT_RIGHT = auto()
    ALT_LEFT = auto()
    ALT_RIGHT = auto()
    META_LEFT = auto()
    META_RIGHT = auto()

    # Function keys
    F1 = auto()
    F2 = auto()
    F3 = auto()
    F4 = auto()
    F5 = auto()
    F6 = auto()
    F7 = auto()
    F8 = auto()
    F9 = auto()
    F10 = auto()
    F11 = auto()
    F12 = auto()
    F13 = auto()
    F14 = auto()
    F15 = auto()
    F16 = auto()
    F17 = auto()
    F18 = auto()
    F19 = auto()
    F20 = auto()
    F21 = auto()
    F22 = auto()
    F23 = auto()
    F24 = auto()

    # Number keys
    ONE = auto()
    TWO = auto()
    THREE = auto()
    FOUR = auto()
    FIVE = auto()
    SIX = auto()
    SEVEN = auto()
    EIGHT = auto()
    NINE = auto()
    ZERO = auto()

    # Letter keys
    A = auto()
    B = auto()
    C = auto()
    D = auto()
    E = auto()
    F = auto()
    G = auto()
    H = auto()
    I = auto()
    J = auto()
    K = auto()
    L = auto()
    M = auto()
    N = auto()
    O = auto()
    P = auto()
    Q = auto()
    R = auto()
    S = auto()
    T = auto()
    U = auto()
    V = auto()
    W = auto()
    X = auto()
    Y = auto()
    Z = auto()

    # Special keys
    SPACE = auto()
    ENTER = auto()
    TAB = auto()
    BACKSPACE = auto()
    ESC = auto()
    INSERT = auto()
    DELETE = auto()
    HOME = auto()
    END = auto()
    PAGE_UP = auto()
    PAGE_DOWN = auto()
    CAPS_LOCK = auto()
    NUM_LOCK = auto()
    SCROLL_LOCK = auto()
    PAUSE = auto()
    PRINT_SCREEN = auto()

    # Arrow keys
    UP = auto()
    DOWN = auto()
    LEFT = auto()
    RIGHT = auto()

    # Numpad keys
    NUMPAD_0 = auto()
    NUMPAD_1 = auto()
    NUMPAD_2 = auto()
    NUMPAD_3 = auto()
    NUMPAD_4 = auto()
    NUMPAD_5 = auto()
    NUMPAD_6 = auto()
    NUMPAD_7 = auto()
    NUMPAD_8 = auto()
    NUMPAD_9 = auto()
    NUMPAD_ADD = auto()
    NUMPAD_SUBTRACT = auto()
    NUMPAD_MULTIPLY = auto()
    NUMPAD_DIVIDE = auto()
    NUMPAD_DECIMAL = auto()
    NUMPAD_ENTER = auto()

    # Additional special characters
    MINUS = auto()
    EQUALS = auto()
    LEFT_BRACKET = auto()
    RIGHT_BRACKET = auto()
    SEMICOLON = auto()
    QUOTE = auto()
    BACKQUOTE = auto()
    BACKSLASH = auto()
    COMMA = auto()
    PERIOD = auto()
    SLASH = auto()

    # Media keys
    MUTE = auto()
    VOLUME_DOWN = auto()
    VOLUME_UP = auto()
    PLAY_PAUSE = auto()
    NEXT_TRACK = auto()
    PREV_TRACK = auto()

    # Additional Media and Special Function Keys
    MEDIA_PLAY = auto()
    MEDIA_PAUSE = auto()
    MEDIA_PLAY_PAUSE = auto()
    MEDIA_STOP = auto()
    MEDIA_PREVIOUS = auto()
    MEDIA_NEXT = auto()
    MEDIA_REWIND = auto()
    MEDIA_FAST_FORWARD = auto()
    AUDIO_MUTE = auto()
    AUDIO_VOLUME_UP = auto()
    AUDIO_VOLUME_DOWN = auto()
    MEDIA_SELECT = auto()
    WWW = auto()
    MAIL = auto()
    CALCULATOR = auto()
    COMPUTER = auto()
    APP_SEARCH = auto()
    APP_HOME = auto()
    APP_BACK = auto()
    APP_FORWARD = auto()
    APP_STOP = auto()
    APP_REFRESH = auto()
    APP_BOOKMARKS = auto()
    BRIGHTNESS_DOWN = auto()
    BRIGHTNESS_UP = auto()
    DISPLAY_SWITCH = auto()
    KEYBOARD_ILLUMINATION_TOGGLE = auto()
    KEYBOARD_ILLUMINATION_DOWN = auto()
    KEYBOARD_ILLUMINATION_UP = auto()
    EJECT = auto()
    SLEEP = auto()
    WAKE = auto()
    EMOJI = auto()
    MENU = auto()
    CLEAR = auto()
    LOCK = auto()

    # Mouse Buttons
    MOUSE_LEFT = auto()
    MOUSE_RIGHT = auto()
    MOUSE_MIDDLE = auto()
    MOUSE_BACK = auto()
    MOUSE_FORWARD = auto()
    MOUSE_SIDE1 = auto()
    MOUSE_SIDE2 = auto()
    MOUSE_SIDE3 = auto()


================================================
File: src/event_bus.py
================================================
from PyQt6.QtCore import QObject, pyqtSignal
from collections import defaultdict
from typing import Callable


class EventEmitter(QObject):
    signal = pyqtSignal(str, tuple, dict)


class EventBus(QObject):
    def __init__(self):
        super().__init__()
        self._subscribers = defaultdict(list)
        self._emitter = EventEmitter()
        self._emitter.signal.connect(self._process_event)

    def subscribe(self, event_type: str, callback: Callable):
        self._subscribers[event_type].append(callback)

    def unsubscribe(self, event_type: str, callback: Callable):
        if event_type in self._subscribers:
            self._subscribers[event_type] = [
                cb for cb in self._subscribers[event_type] if cb != callback
            ]

    def emit(self, event_type: str, *args, **kwargs):
        # Emit the signal, which will be processed on the main thread
        self._emitter.signal.emit(event_type, args, kwargs)

    def _process_event(self, event_type: str, args: tuple, kwargs: dict):
        if event_type in self._subscribers:
            for callback in self._subscribers[event_type]:
                callback(*args, **kwargs)


================================================
File: src/input_manager.py
================================================
from typing import Set, Dict, Type

from event_bus import EventBus
from enums import InputEvent, KeyCode
from config_manager import ConfigManager
from input_backend.input_backend_base import InputBackendBase
from input_backend.evdev_backend import EvdevBackend
from input_backend.pynput_backend import PynputBackend


class KeyChord:
    """Represents a combination of keys that need to be pressed simultaneously."""

    def __init__(self, keys: Set[KeyCode | frozenset[KeyCode]]):
        """Initialize the KeyChord."""
        self.keys = keys
        self.pressed_keys: Set[KeyCode] = set()

    def update(self, key: KeyCode, event_type: InputEvent) -> bool:
        """Update the state of pressed keys and check if the chord is active."""
        if event_type == InputEvent.KEY_PRESS:
            self.pressed_keys.add(key)
        elif event_type == InputEvent.KEY_RELEASE:
            self.pressed_keys.discard(key)
        return self.is_active()

    def is_active(self) -> bool:
        """Check if all keys in the chord are currently pressed."""
        for key in self.keys:
            if isinstance(key, frozenset):
                if not any(k in self.pressed_keys for k in key):
                    return False
            elif key not in self.pressed_keys:
                return False
        return True


class InputManager:
    """Manages input backends and listens for specific key combinations."""

    def __init__(self, event_bus: EventBus):
        self.event_bus = event_bus
        self.active_backend: InputBackendBase | None = None
        self.shortcuts: Dict[str, KeyChord] = {}
        self.backend_classes: Dict[str, Type[InputBackendBase]] = {
            'evdev': EvdevBackend,
            'pynput': PynputBackend
        }
        self.load_shortcuts()
        self.initialize_active_backend()

    def load_shortcuts(self):
        active_profiles = ConfigManager.get_profiles(active_only=True)
        for profile in active_profiles:
            profile_name = profile['name']
            shortcut = ConfigManager.get_value('activation_key', profile_name)
            keys = self.parse_key_combination(shortcut)
            self.shortcuts[profile_name] = KeyChord(keys)

    def initialize_active_backend(self):
        preferred_backend = ConfigManager.get_value('global_options.input_backend')

        if preferred_backend == 'auto' or preferred_backend not in self.backend_classes:
            self.select_auto_backend()
        else:
            try:
                self.set_active_backend(self.backend_classes[preferred_backend])
            except ValueError:
                print(f"Preferred backend '{preferred_backend}' failed to initialize. "
                      f"Falling back to auto selection.")
                self.select_auto_backend()

    def select_auto_backend(self):
        for backend_class in self.backend_classes.values():
            if backend_class.is_available():
                try:
                    self.set_active_backend(backend_class)
                    return
                except ValueError:
                    continue
        raise RuntimeError("No supported input backend found")

    def set_active_backend(self, backend_class: Type[InputBackendBase]):
        if self.active_backend:
            self.stop()
            self.active_backend = None

        if backend_class.is_available():
            new_backend = backend_class()
            new_backend.on_input_event = self.on_input_event
            self.active_backend = new_backend
            ConfigManager.log_print(f"Using input backend: {backend_class.__name__}")
        else:
            raise ValueError(f"Backend {backend_class.__name__} is not available")

    def start(self):
        if self.active_backend:
            self.active_backend.start()
        else:
            raise RuntimeError("No active backend selected")

    def stop(self):
        if self.active_backend:
            self.active_backend.stop()

    def parse_key_combination(self, combination_string: str) -> Set[KeyCode | frozenset[KeyCode]]:
        """Parse a string representation of key combination into a set of KeyCodes."""
        keys = set()
        key_map = {
            'CTRL': frozenset({KeyCode.CTRL_LEFT, KeyCode.CTRL_RIGHT}),
            'SHIFT': frozenset({KeyCode.SHIFT_LEFT, KeyCode.SHIFT_RIGHT}),
            'ALT': frozenset({KeyCode.ALT_LEFT, KeyCode.ALT_RIGHT}),
            'META': frozenset({KeyCode.META_LEFT, KeyCode.META_RIGHT}),
        }

        for key in combination_string.upper().split('+'):
            key = key.strip()
            if key in key_map:
                keys.add(key_map[key])
            else:
                try:
                    keycode = KeyCode[key]
                    keys.add(keycode)
                except KeyError:
                    print(f"Unknown key: {key}")
        return keys

    def on_input_event(self, event):
        """Handle input events and trigger callbacks if the key chord becomes active."""
        key, event_type = event
        for profile_name, key_chord in self.shortcuts.items():
            was_active = key_chord.is_active()
            is_active = key_chord.update(key, event_type)

            if not was_active and is_active:
                self.event_bus.emit("shortcut_triggered", profile_name, "press")
            elif was_active and not is_active:
                self.event_bus.emit("shortcut_triggered", profile_name, "release")

    def update_shortcuts(self):
        self.load_shortcuts()

    def cleanup(self):
        self.stop()
        # Reset all attributes to enforce garbage collection
        self.active_backend = None
        self.shortcuts = None


================================================
File: src/main.py
================================================
import sys
from PyQt6.QtWidgets import QApplication
from ui.ui_manager import UIManager
from application_controller import ApplicationController
from event_bus import EventBus
from config_manager import ConfigManager


def main():
    app = QApplication(sys.argv)
    app.setQuitOnLastWindowClosed(False)

    event_bus = EventBus()
    ConfigManager.initialize(event_bus)
    ui_manager = UIManager(event_bus)

    controller = ApplicationController(ui_manager, event_bus)

    exit_code = controller.run()
    sys.exit(exit_code)


if __name__ == "__main__":
    main()


================================================
File: src/output_manager.py
================================================
import subprocess
import os
import signal
import time
import fcntl
import struct
from pynput.keyboard import Key, Controller as PynputController

from config_manager import ConfigManager
from event_bus import EventBus


class OutputManager:
    """A class to simulate keyboard output using various methods."""
    def __init__(self, profile_name: str, event_bus: EventBus):
        """Initialize the OutputManager with the specified configuration."""
        self.config = ConfigManager.get_section('post_processing', profile_name)
        self.output_method = self.config.get('keyboard_simulator')
        self.dotool_process = None
        self.uinput_backend = None

        if self.output_method == 'pynput':
            self.keyboard = PynputController()
        elif self.output_method == 'dotool':
            self._initialize_dotool()
        elif self.output_method == 'uinput':
            self.uinput_backend = UinputBackend(self.config)

    def typewrite(self, text):
        """Simulate typing the given text with the specified interval between keystrokes."""
        interval = self.config.get('writing_key_press_delay')
        if self.output_method == 'pynput':
            self._typewrite_pynput(text, interval)
        elif self.output_method == 'ydotool':
            self._typewrite_ydotool(text, interval)
        elif self.output_method == 'dotool':
            self._typewrite_dotool(text, interval)
        elif self.output_method == 'uinput':
            self.uinput_backend.typewrite(text, interval)

    def backspace(self, count: int):
        """Simulate pressing the backspace key 'count' times."""
        if self.output_method == 'pynput':
            self._backspace_pynput(count)
        elif self.output_method == 'ydotool':
            self._backspace_ydotool(count)
        elif self.output_method == 'dotool':
            self._backspace_dotool(count)
        elif self.output_method == 'uinput':
            self.uinput_backend.backspace(count)

    def _typewrite_pynput(self, text, interval):
        """Simulate typing using pynput."""
        for char in text:
            self.keyboard.press(char)
            self.keyboard.release(char)
            time.sleep(interval)

    def _backspace_pynput(self, count):
        """Simulate backspace using pynput."""
        for _ in range(count):
            self.keyboard.press(Key.backspace)
            self.keyboard.release(Key.backspace)
            time.sleep(0.05)

    def _typewrite_ydotool(self, text, interval):
        """Simulate typing using ydotool."""
        cmd = "ydotool"
        command = [
            cmd,
            "type",
            "--key-delay",
            str(interval * 1000),
            "--",
            text,
        ]
        try:
            subprocess.run(command, check=True)
        except subprocess.CalledProcessError as e:
            print(f"Error running command: {e}")

    def _backspace_ydotool(self, count):
        """Simulate backspace using ydotool."""
        cmd = "ydotool"
        backspace_commands = ["key"] + ["14:1", "14:0"] * count
        command = [cmd] + backspace_commands

        try:
            subprocess.run(command, check=True)
        except subprocess.CalledProcessError as e:
            print(f"Error running command: {e}")

    def _initialize_dotool(self):
        """Initialize the dotool process for output simulation."""
        self.dotool_process = subprocess.Popen("dotool", stdin=subprocess.PIPE, text=True)
        assert self.dotool_process.stdin is not None

    def _terminate_dotool(self):
        """Terminate the dotool process if it's running."""
        if self.dotool_process:
            os.kill(self.dotool_process.pid, signal.SIGINT)
            self.dotool_process = None

    def _typewrite_dotool(self, text, interval):
        """Simulate typing using dotool."""
        assert self.dotool_process and self.dotool_process.stdin
        self.dotool_process.stdin.write(f"typedelay {interval * 1000}\n")
        self.dotool_process.stdin.write(f"type {text}\n")
        self.dotool_process.stdin.flush()

    def _backspace_dotool(self, count):
        """Simulate backspace using dotool."""
        assert self.dotool_process and self.dotool_process.stdin
        backspace_commands = "k:14 " * count
        self.dotool_process.stdin.write(f"key {backspace_commands}\n")
        self.dotool_process.stdin.flush()

    def cleanup(self):
        """Perform cleanup operations, such as terminating the dotool process."""
        if self.output_method == 'dotool':
            self._terminate_dotool()
        elif self.output_method == 'uinput':
            if self.uinput_backend:
                self.uinput_backend.cleanup()


class UinputBackend:
    # Constants
    UINPUT_MAX_NAME_SIZE = 80
    ABS_MAX = 0x3f
    ABS_CNT = ABS_MAX + 1

    UI_DEV_CREATE = 0x5501
    UI_DEV_DESTROY = 0x5502
    UI_SET_EVBIT = 0x40045564
    UI_SET_KEYBIT = 0x40045565

    EV_SYN = 0x00
    EV_KEY = 0x01
    SYN_REPORT = 0

    KEY_CODES = {
        'a': 30, 'b': 48, 'c': 46, 'd': 32, 'e': 18, 'f': 33, 'g': 34, 'h': 35, 'i': 23,
        'j': 36, 'k': 37, 'l': 38, 'm': 50, 'n': 49, 'o': 24, 'p': 25, 'q': 16, 'r': 19,
        's': 31, 't': 20, 'u': 22, 'v': 47, 'w': 17, 'x': 45, 'y': 21, 'z': 44,
        '0': 11, '1': 2, '2': 3, '3': 4, '4': 5, '5': 6, '6': 7, '7': 8, '8': 9, '9': 10,
        ' ': 57, ',': 51, '.': 52, '-': 12, '=': 13, ';': 39, "'": 40, '\\': 43, '/': 53,
        '[': 26, ']': 27, '`': 41, '?': 53, '!': 2, '@': 3, '#': 4, '$': 5, '%': 6, '^': 7,
        '&': 8, '*': 9, '(': 10, ')': 11, '_': 12, '+': 13, '{': 26, '}': 27, '|': 43,
        ':': 39, '"': 40, '<': 51, '>': 52, '~': 41,
        'KEY_LEFTSHIFT': 42, 'KEY_RIGHTSHIFT': 54,
        'KEY_LEFTCTRL': 29, 'KEY_RIGHTCTRL': 97,
        'KEY_LEFTALT': 56, 'KEY_RIGHTALT': 100,
        'KEY_LEFTMETA': 125, 'KEY_RIGHTMETA': 126,
        'KEY_BACKSPACE': 14
    }

    SHIFT_CHARS = '~!@#$%^&*()_+{}|:"<>?ABCDEFGHIJKLMNOPQRSTUVWXYZ'

    def __init__(self, config):
        self.config = config
        self.uinput_fd = None
        self.device_name = 'WhisperWriter Virtual Keyboard'.encode()
        self.initialize_device()

    def initialize_device(self):
        self.uinput_fd = os.open('/dev/uinput', os.O_WRONLY | os.O_NONBLOCK)

        # Enable key and synchronization events
        fcntl.ioctl(self.uinput_fd, self.UI_SET_EVBIT, self.EV_KEY)
        fcntl.ioctl(self.uinput_fd, self.UI_SET_EVBIT, self.EV_SYN)

        # Enable all key codes
        for i in range(256):
            fcntl.ioctl(self.uinput_fd, self.UI_SET_KEYBIT, i)

        # Create the device
        device_struct = struct.pack('80sHHHHi' + 'i' * (self.ABS_CNT * 4),
                                    self.device_name,
                                    0x03,  # BUS_USB
                                    0x1234,  # Vendor ID
                                    0x5678,  # Product ID
                                    0,  # Version
                                    0,  # FF effects
                                    *(0 for _ in range(self.ABS_CNT * 4)))  # Absolute axes info

        os.write(self.uinput_fd, device_struct)
        fcntl.ioctl(self.uinput_fd, self.UI_DEV_CREATE)

        # Give the system some time to create the device
        time.sleep(0.1)

    def _emit(self, type, code, value):
        t = time.time()
        sec = int(t)
        usec = int((t - sec) * 1000000)
        event = struct.pack('llHHI', sec, usec, type, code, value)
        os.write(self.uinput_fd, event)

    def _syn(self):
        self._emit(self.EV_SYN, self.SYN_REPORT, 0)

    def _press_key(self, key_code):
        self._emit(self.EV_KEY, key_code, 1)
        self._syn()

    def _release_key(self, key_code):
        self._emit(self.EV_KEY, key_code, 0)
        self._syn()

    def _type_char(self, char, interval):
        shift_needed = char in self.SHIFT_CHARS
        if char.isupper():
            key_code = self.KEY_CODES.get(char.lower())
        else:
            key_code = self.KEY_CODES.get(char)

        if key_code is None:
            print(f"Character '{char}' not supported")
            return

        if shift_needed:
            self._press_key(self.KEY_CODES['KEY_LEFTSHIFT'])

        self._press_key(key_code)
        time.sleep(interval)  # Interval must be here to properly register shifted characters
        self._release_key(key_code)

        if shift_needed:
            self._release_key(self.KEY_CODES['KEY_LEFTSHIFT'])

    def typewrite(self, text, interval):
        for char in text:
            self._type_char(char, interval)

    def backspace(self, count: int):
        backspace_code = self.KEY_CODES['KEY_BACKSPACE']
        for _ in range(count):
            self._press_key(backspace_code)
            time.sleep(0.005)  # Small delay between backspaces
            self._release_key(backspace_code)

    def cleanup(self):
        if self.uinput_fd:
            fcntl.ioctl(self.uinput_fd, self.UI_DEV_DESTROY)
            os.close(self.uinput_fd)


================================================
File: src/play_wav.py
================================================
import wave
import pyaudio
import os


def play_wav(file_path):
    if not os.path.exists(file_path):
        return
    # Open the WAV file
    with wave.open(file_path, 'rb') as wf:
        # Create an interface to PortAudio
        p = pyaudio.PyAudio()

        # Open a .Stream object to write the WAV file to
        stream = p.open(format=p.get_format_from_width(wf.getsampwidth()),
                        channels=wf.getnchannels(),
                        rate=wf.getframerate(),
                        output=True)

        # Read data in chunks
        chunk_size = 1024
        data = wf.readframes(chunk_size)

        # Play the sound by writing audio data to the stream
        while data:
            stream.write(data)
            data = wf.readframes(chunk_size)

        # Close and terminate the stream
        stream.close()
        p.terminate()


================================================
File: src/post_processing.py
================================================
import os
import importlib.util
import copy
from typing import List, Dict

from post_processing_base import PostProcessor


class PostProcessingManager:
    def __init__(self, enabled_scripts):
        self.scripts_folder = 'scripts'
        self.enabled_scripts = enabled_scripts
        self.processors: List[PostProcessor] = []
        self._load_processors()

    def _load_processors(self):
        for script_name in self.enabled_scripts:
            script_path = os.path.join(self.scripts_folder, f"{script_name}")
            if os.path.exists(script_path):
                try:
                    spec = importlib.util.spec_from_file_location(script_name, script_path)
                    module = importlib.util.module_from_spec(spec)
                    spec.loader.exec_module(module)
                    processor_class = getattr(module, 'Processor')
                    if issubclass(processor_class, PostProcessor):
                        self.processors.append(processor_class())
                    else:
                        print(f"Warning: {script_name} does not contain a valid Processor class")
                except Exception as e:
                    print(f"Error loading {script_name}: {str(e)}")
            else:
                print(f"Warning: Script {script_name} not found")

    def process(self, transcription: Dict) -> Dict:
        result = copy.deepcopy(transcription)
        result['processed'] = copy.copy(result['raw_text'])
        for processor in self.processors:
            result = processor.process(result)
        return result


================================================
File: src/post_processing_base.py
================================================
from abc import ABC, abstractmethod
from typing import Dict


class PostProcessor(ABC):
    @abstractmethod
    def process(self, transcription: Dict) -> Dict:
        pass


================================================
File: src/profile.py
================================================
from queue import Queue
from typing import Dict

from output_manager import OutputManager
from transcription_manager import TranscriptionManager
from enums import ProfileState, RecordingMode
from event_bus import EventBus
from post_processing import PostProcessingManager
from config_manager import ConfigManager


class Profile:
    """
    Encapsulates the configuration, state, and behavior of a specific transcription profile.

    Manages the lifecycle of transcription sessions, including recording, processing,
    and output of transcribed text. Coordinates interactions between TranscriptionManager,
    PostProcessingManager, and OutputManager. Handles both streaming and non-streaming
    transcription modes, and manages its own state transitions based on user input and
    transcription events.
    """
    def __init__(self, name: str, event_bus: EventBus):
        """Initialize the Profile with name, configuration, and necessary components."""
        self.name = name
        self.config = ConfigManager.get_section('profiles', name)
        self.event_bus = event_bus
        self.audio_queue = Queue()
        self.output_manager = OutputManager(name, event_bus)
        self.recording_mode = RecordingMode[self.config['recording_options']['recording_mode']
                                            .upper()]
        self.state = ProfileState.IDLE
        self.post_processor = PostProcessingManager(
                                self.config['post_processing']['enabled_scripts'])
        self.transcription_manager = TranscriptionManager(self, event_bus)
        self.is_streaming = self.config['backend'].get('use_streaming', False)
        self.streaming_chunk_size = self.transcription_manager.get_preferred_streaming_chunk_size()
        self.result_handler = (StreamingResultHandler(self.output_manager)
                               if self.is_streaming else None)
        self.current_session_id = None

        self.event_bus.subscribe("raw_transcription_result", self.handle_raw_transcription)
        self.event_bus.subscribe("transcription_finished", self.handle_transcription_finished)

    def start_transcription(self, session_id: str):
        """Start the transcription process for this profile."""
        self.current_session_id = session_id
        self.state = ProfileState.RECORDING
        self.event_bus.emit("profile_state_change", f"({self.name}) "
                            f"{'Streaming' if self.is_streaming else 'Recording'}...")
        self.transcription_manager.start_transcription(session_id)

    def recording_stopped(self):
        """Transition to transcribing state since recording has stopped."""
        if self.state == ProfileState.RECORDING:
            self.event_bus.emit("profile_state_change", f"({self.name}) Transcribing...")
            self.state = ProfileState.TRANSCRIBING

    def is_recording(self) -> bool:
        return self.state == ProfileState.RECORDING

    def is_idle(self) -> bool:
        return self.state == ProfileState.IDLE

    def finish_transcription(self):
        """Finish the transcription process and return to idle state."""
        previous_state = self.state
        self.state = ProfileState.IDLE
        self.event_bus.emit("profile_state_change", '')

        # Make sure to reset sid BEFORE calling ApplicationController via event
        old_sid = self.current_session_id
        self.current_session_id = None
        # Only emit transcription_complete if we were actually transcribing
        if previous_state in [ProfileState.TRANSCRIBING, ProfileState.RECORDING]:
            self.event_bus.emit("transcription_complete", old_sid)

    def handle_raw_transcription(self, result: Dict, session_id: str):
        """
        Handle raw transcription results.

        The 'result' dictionary typically contains:
        - 'raw_text': The unprocessed transcription text.
        - 'processed': The post-processed transcription text. (created by the post_processor)
        - 'is_utterance_end': Boolean indicating if this is the end of an utterance.
        - 'language': Detected or specified language of the audio.
        - 'error': Any error message (None if no error occurred).
        """
        if session_id != self.current_session_id:
            return

        processed_result = self.post_processor.process(result)

        if self.is_streaming:
            self.result_handler.handle_result(processed_result)
        else:
            self.output(processed_result['processed'])

    def handle_transcription_finished(self, profile_name: str):
        if profile_name == self.name:
            self.finish_transcription()

    def output(self, text: str):
        """Output the processed text using the output manager."""
        if text:
            self.output_manager.typewrite(text)

    def should_start_on_press(self) -> bool:
        """Determine if recording should start on key press."""
        return self.state == ProfileState.IDLE

    def should_stop_on_press(self) -> bool:
        """Determine if recording should stop on key press."""
        return (self.state == ProfileState.RECORDING and
                self.recording_mode in [
                    RecordingMode.PRESS_TO_TOGGLE,
                    RecordingMode.CONTINUOUS,
                    RecordingMode.VOICE_ACTIVITY_DETECTION
                ])

    def should_stop_on_release(self) -> bool:
        """Determine if recording should stop on key release."""
        return (self.state == ProfileState.RECORDING and
                self.recording_mode == RecordingMode.HOLD_TO_RECORD)

    def cleanup(self):
        """Clean up resources and reset attributes for garbage collection."""
        self.recording_stopped()
        self.finish_transcription()
        if self.transcription_manager:
            self.transcription_manager.cleanup()
        if self.output_manager:
            self.output_manager.cleanup()
        if self.event_bus:
            self.event_bus.unsubscribe("raw_transcription_result",
                                       self.handle_raw_transcription)
            self.event_bus.unsubscribe("transcription_finished",
                                       self.handle_transcription_finished)

        # Reset all attributes to enforce garbage collection
        self.config = None
        self.audio_queue = None
        self.output_manager = None
        self.recording_mode = None
        self.state = None
        self.is_streaming = None
        self.post_processor = None
        self.transcription_manager = None
        self.result_handler = None


class StreamingResultHandler:
    def __init__(self, output_manager):
        self.output_manager = output_manager
        self.buffer = ""

    def handle_result(self, result: Dict):
        new_text = result['processed']

        if not new_text:
            return

        common_prefix_length = self._get_common_prefix_length(self.buffer, new_text)
        backspace_count = len(self.buffer) - common_prefix_length
        text_to_output = new_text[common_prefix_length:]

        if backspace_count > 0:
            self.output_manager.backspace(backspace_count)

        if text_to_output:
            self.output_manager.typewrite(text_to_output)

        self.buffer = new_text

        if result.get('is_utterance_end', False):
            self.buffer = ""

    def _get_common_prefix_length(self, s1: str, s2: str) -> int:
        for i, (c1, c2) in enumerate(zip(s1, s2)):
            if c1 != c2:
                return i
        return min(len(s1), len(s2))


================================================
File: src/transcription_manager.py
================================================
import threading
import time
import queue
from typing import Dict, Any

from config_manager import ConfigManager
from event_bus import EventBus
from transcription_backend.transcription_backend_base import TranscriptionBackendBase


class TranscriptionManager:
    def __init__(self, profile, event_bus: EventBus):
        self.profile_name = profile.name
        self.event_bus = event_bus
        self.audio_queue = profile.audio_queue
        self.backend_type = ConfigManager.get_value('backend_type', self.profile_name)
        backend_class = self._get_backend_class()
        self.backend: TranscriptionBackendBase = backend_class()
        self.processing_thread = None
        self.current_session_id = None
        self.transcribe_event = threading.Event()
        self.stop_event = threading.Event()

    def _get_backend_class(self):
        if self.backend_type == 'faster_whisper':
            from transcription_backend.faster_whisper_backend import FasterWhisperBackend
            return FasterWhisperBackend
        elif self.backend_type == 'openai':
            from transcription_backend.openai_backend import OpenAIBackend
            return OpenAIBackend
        elif self.backend_type == 'vosk':
            from transcription_backend.vosk_backend import VoskBackend
            return VoskBackend
        else:
            raise ValueError(f"Unsupported backend type: {self.backend_type}")

    def get_preferred_streaming_chunk_size(self):
        return self.backend.get_preferred_streaming_chunk_size()

    def start(self):
        if not self.backend.is_initialized():
            backend_options = ConfigManager.get_section('backend', self.profile_name)
            try:
                self.backend.initialize(backend_options)
            except Exception as e:
                raise RuntimeError(f"Failed to initialize backend for profile "
                                   f"{self.profile_name}.\n{e}")

        if not self.processing_thread:
            self.processing_thread = threading.Thread(target=self._transcription_thread)
            self.processing_thread.start()

    def stop(self):
        self.stop_event.set()
        self.transcribe_event.set()  # Wake up the thread to exit
        if self.processing_thread:
            self.processing_thread.join()
            self.processing_thread = None

    def start_transcription(self, session_id: str):
        self.current_session_id = session_id
        self.stop_event.clear()
        self.transcribe_event.set()

    def _transcription_thread(self):
        while not self.stop_event.is_set():
            self.transcribe_event.wait()
            self.transcribe_event.clear()

            if self.stop_event.is_set():
                break

            self._process_audio()

    def _process_audio(self):
        if not self.backend:
            ConfigManager.log_print("Backend not initialized. Transcription cannot start.")
            return

        is_streaming = ConfigManager.get_value('backend.use_streaming', self.profile_name)

        try:
            if is_streaming:
                for result in self.backend.process_stream(self.audio_queue, self.stop_event):
                    if self.stop_event.is_set():
                        break
                    self._emit_result(result)
            else:
                while not self.stop_event.is_set():
                    try:
                        audio_data = self.audio_queue.get(timeout=0.2)
                        if audio_data is None:  # Sentinel value
                            break
                        start_time = time.time()
                        result = self.backend.transcribe_complete(
                            audio_data['audio_chunk'],
                            audio_data['sample_rate'],
                            audio_data['channels'],
                            audio_data['language']
                        )
                        end_time = time.time()
                        transcription_time = end_time - start_time
                        ConfigManager.log_print(
                            f'Transcription completed in {transcription_time:.2f} seconds.\n'
                            f"Raw transcription: {result['raw_text']}")
                        result['is_utterance_end'] = True
                        self._emit_result(result)
                    except queue.Empty:
                        continue
        finally:
            self.current_session_id = None
            self.event_bus.emit("transcription_finished", self.profile_name)

    def _emit_result(self, result: Dict[str, Any]):
        if result['error']:
            self.event_bus.emit("transcription_error", result['error'])
        self.event_bus.emit("raw_transcription_result", result, self.current_session_id)

    def cleanup(self):
        self.stop()
        if self.backend:
            self.backend.cleanup()
            self.backend = None


================================================
File: src/input_backend/evdev_backend.py
================================================
from typing import Optional, List

from input_backend.input_backend_base import InputBackendBase
from enums import KeyCode, InputEvent


class EvdevBackend(InputBackendBase):
    """Backend for handling input events using the evdev library."""
    @classmethod
    def is_available(cls) -> bool:
        """Check if the evdev library is available."""
        try:
            import evdev
            return True
        except ImportError:
            return False

    def __init__(self):
        """Initialize the EvdevBackend."""
        import evdev
        import threading
        self.devices: List[evdev.InputDevice] = []
        self.key_map: Optional[dict] = None
        self.evdev = None
        self.thread: Optional[threading.Thread] = None
        self.stop_event: Optional[threading.Event] = None

    def start(self):
        """Start the evdev backend."""
        import evdev
        import threading
        self.evdev = evdev
        self.key_map = self._create_key_map()

        # Initialize input devices, excluding our virtual keyboard
        self.devices = [evdev.InputDevice(path) for path in evdev.list_devices()
                        if not self._is_virtual_keyboard(evdev.InputDevice(path))]
        self.stop_event = threading.Event()
        self._setup_signal_handler()
        self._start_listening()

    def _is_virtual_keyboard(self, device):
        return device.name == "WhisperWriter Virtual Keyboard"

    def _setup_signal_handler(self):
        """Set up signal handlers for graceful shutdown."""
        import signal

        def signal_handler(signum, frame):
            print("Received termination signal. Stopping evdev backend...")
            self.stop()

        signal.signal(signal.SIGTERM, signal_handler)
        signal.signal(signal.SIGINT, signal_handler)

    def stop(self):
        """Stop the evdev backend and clean up resources."""
        if self.stop_event:
            self.stop_event.set()

        if self.thread:
            self.thread.join(timeout=1)  # Wait for up to 1 second
            if self.thread.is_alive():
                print("Thread did not terminate in time. Forcing exit.")

        # Close all devices
        for device in self.devices:
            try:
                device.close()
            except Exception:
                pass  # Ignore errors when closing devices
        self.devices = []

    def _start_listening(self):
        """Start the listening thread."""
        import threading
        self.thread = threading.Thread(target=self._evdev_thread)
        self.thread.start()

    def _evdev_thread(self):
        """Main loop for listening to input events."""
        import select
        while not self.stop_event.is_set():
            try:
                # Wait for input events with a timeout of 0.1 seconds
                r, _, _ = select.select(self.devices, [], [], 0.1)
                for device in r:
                    self._read_device_events(device)
            except Exception as e:
                if self.stop_event.is_set():
                    break
                print(f"Unexpected error in _evdev_thread: {e}")

    def _read_device_events(self, device):
        """Read and process events from a single device."""
        if self._is_virtual_keyboard(device):
            return  # Skip processing events from our virtual keyboard
        try:
            for event in device.read():
                if event.type == self.evdev.ecodes.EV_KEY:
                    self._handle_input_event(event)
        except Exception as e:
            self._handle_device_error(device, e)

    def _handle_device_error(self, device, error):
        """Handle errors that occur when reading from a device."""
        import errno
        if isinstance(error, BlockingIOError) and error.errno == errno.EAGAIN:
            return  # Non-blocking IO is expected, just continue
        if isinstance(error, OSError) and (error.errno == errno.EBADF or
                                           error.errno == errno.ENODEV):
            print(f"Device {device.path} is no longer available. Removing it.")
            self.devices.remove(device)
        else:
            print(f"Unexpected error reading device: {error}")

    def _handle_input_event(self, event):
        """Process a single input event."""
        key_code, event_type = self._translate_key_event(event)
        if key_code is not None and event_type is not None:
            self.on_input_event((key_code, event_type))

    def _translate_key_event(self, event) -> tuple[KeyCode | None, InputEvent | None]:
        """Translate an evdev event to our internal representation."""
        key_event = self.evdev.categorize(event)
        if not isinstance(key_event, self.evdev.events.KeyEvent):
            return None, None

        key_code = self.key_map.get(key_event.scancode)
        if key_code is None:
            return None, None

        if key_event.keystate in [key_event.key_down, key_event.key_hold]:
            event_type = InputEvent.KEY_PRESS
        elif key_event.keystate == key_event.key_up:
            event_type = InputEvent.KEY_RELEASE
        else:
            return None, None

        return key_code, event_type

    def _create_key_map(self):
        """Create a mapping from evdev key codes to our internal KeyCode enum."""
        return {
            # Modifier keys
            self.evdev.ecodes.KEY_LEFTCTRL: KeyCode.CTRL_LEFT,
            self.evdev.ecodes.KEY_RIGHTCTRL: KeyCode.CTRL_RIGHT,
            self.evdev.ecodes.KEY_LEFTSHIFT: KeyCode.SHIFT_LEFT,
            self.evdev.ecodes.KEY_RIGHTSHIFT: KeyCode.SHIFT_RIGHT,
            self.evdev.ecodes.KEY_LEFTALT: KeyCode.ALT_LEFT,
            self.evdev.ecodes.KEY_RIGHTALT: KeyCode.ALT_RIGHT,
            self.evdev.ecodes.KEY_LEFTMETA: KeyCode.META_LEFT,
            self.evdev.ecodes.KEY_RIGHTMETA: KeyCode.META_RIGHT,

            # Function keys
            self.evdev.ecodes.KEY_F1: KeyCode.F1,
            self.evdev.ecodes.KEY_F2: KeyCode.F2,
            self.evdev.ecodes.KEY_F3: KeyCode.F3,
            self.evdev.ecodes.KEY_F4: KeyCode.F4,
            self.evdev.ecodes.KEY_F5: KeyCode.F5,
            self.evdev.ecodes.KEY_F6: KeyCode.F6,
            self.evdev.ecodes.KEY_F7: KeyCode.F7,
            self.evdev.ecodes.KEY_F8: KeyCode.F8,
            self.evdev.ecodes.KEY_F9: KeyCode.F9,
            self.evdev.ecodes.KEY_F10: KeyCode.F10,
            self.evdev.ecodes.KEY_F11: KeyCode.F11,
            self.evdev.ecodes.KEY_F12: KeyCode.F12,

            # Number keys
            self.evdev.ecodes.KEY_1: KeyCode.ONE,
            self.evdev.ecodes.KEY_2: KeyCode.TWO,
            self.evdev.ecodes.KEY_3: KeyCode.THREE,
            self.evdev.ecodes.KEY_4: KeyCode.FOUR,
            self.evdev.ecodes.KEY_5: KeyCode.FIVE,
            self.evdev.ecodes.KEY_6: KeyCode.SIX,
            self.evdev.ecodes.KEY_7: KeyCode.SEVEN,
            self.evdev.ecodes.KEY_8: KeyCode.EIGHT,
            self.evdev.ecodes.KEY_9: KeyCode.NINE,
            self.evdev.ecodes.KEY_0: KeyCode.ZERO,

            # Letter keys
            self.evdev.ecodes.KEY_A: KeyCode.A,
            self.evdev.ecodes.KEY_B: KeyCode.B,
            self.evdev.ecodes.KEY_C: KeyCode.C,
            self.evdev.ecodes.KEY_D: KeyCode.D,
            self.evdev.ecodes.KEY_E: KeyCode.E,
            self.evdev.ecodes.KEY_F: KeyCode.F,
            self.evdev.ecodes.KEY_G: KeyCode.G,
            self.evdev.ecodes.KEY_H: KeyCode.H,
            self.evdev.ecodes.KEY_I: KeyCode.I,
            self.evdev.ecodes.KEY_J: KeyCode.J,
            self.evdev.ecodes.KEY_K: KeyCode.K,
            self.evdev.ecodes.KEY_L: KeyCode.L,
            self.evdev.ecodes.KEY_M: KeyCode.M,
            self.evdev.ecodes.KEY_N: KeyCode.N,
            self.evdev.ecodes.KEY_O: KeyCode.O,
            self.evdev.ecodes.KEY_P: KeyCode.P,
            self.evdev.ecodes.KEY_Q: KeyCode.Q,
            self.evdev.ecodes.KEY_R: KeyCode.R,
            self.evdev.ecodes.KEY_S: KeyCode.S,
            self.evdev.ecodes.KEY_T: KeyCode.T,
            self.evdev.ecodes.KEY_U: KeyCode.U,
            self.evdev.ecodes.KEY_V: KeyCode.V,
            self.evdev.ecodes.KEY_W: KeyCode.W,
            self.evdev.ecodes.KEY_X: KeyCode.X,
            self.evdev.ecodes.KEY_Y: KeyCode.Y,
            self.evdev.ecodes.KEY_Z: KeyCode.Z,

            # Special keys
            self.evdev.ecodes.KEY_SPACE: KeyCode.SPACE,
            self.evdev.ecodes.KEY_ENTER: KeyCode.ENTER,
            self.evdev.ecodes.KEY_TAB: KeyCode.TAB,
            self.evdev.ecodes.KEY_BACKSPACE: KeyCode.BACKSPACE,
            self.evdev.ecodes.KEY_ESC: KeyCode.ESC,
            self.evdev.ecodes.KEY_INSERT: KeyCode.INSERT,
            self.evdev.ecodes.KEY_DELETE: KeyCode.DELETE,
            self.evdev.ecodes.KEY_HOME: KeyCode.HOME,
            self.evdev.ecodes.KEY_END: KeyCode.END,
            self.evdev.ecodes.KEY_PAGEUP: KeyCode.PAGE_UP,
            self.evdev.ecodes.KEY_PAGEDOWN: KeyCode.PAGE_DOWN,
            self.evdev.ecodes.KEY_CAPSLOCK: KeyCode.CAPS_LOCK,
            self.evdev.ecodes.KEY_NUMLOCK: KeyCode.NUM_LOCK,
            self.evdev.ecodes.KEY_SCROLLLOCK: KeyCode.SCROLL_LOCK,
            self.evdev.ecodes.KEY_PAUSE: KeyCode.PAUSE,
            self.evdev.ecodes.KEY_SYSRQ: KeyCode.PRINT_SCREEN,

            # Arrow keys
            self.evdev.ecodes.KEY_UP: KeyCode.UP,
            self.evdev.ecodes.KEY_DOWN: KeyCode.DOWN,
            self.evdev.ecodes.KEY_LEFT: KeyCode.LEFT,
            self.evdev.ecodes.KEY_RIGHT: KeyCode.RIGHT,

            # Numpad keys
            self.evdev.ecodes.KEY_KP0: KeyCode.NUMPAD_0,
            self.evdev.ecodes.KEY_KP1: KeyCode.NUMPAD_1,
            self.evdev.ecodes.KEY_KP2: KeyCode.NUMPAD_2,
            self.evdev.ecodes.KEY_KP3: KeyCode.NUMPAD_3,
            self.evdev.ecodes.KEY_KP4: KeyCode.NUMPAD_4,
            self.evdev.ecodes.KEY_KP5: KeyCode.NUMPAD_5,
            self.evdev.ecodes.KEY_KP6: KeyCode.NUMPAD_6,
            self.evdev.ecodes.KEY_KP7: KeyCode.NUMPAD_7,
            self.evdev.ecodes.KEY_KP8: KeyCode.NUMPAD_8,
            self.evdev.ecodes.KEY_KP9: KeyCode.NUMPAD_9,
            self.evdev.ecodes.KEY_KPPLUS: KeyCode.NUMPAD_ADD,
            self.evdev.ecodes.KEY_KPMINUS: KeyCode.NUMPAD_SUBTRACT,
            self.evdev.ecodes.KEY_KPASTERISK: KeyCode.NUMPAD_MULTIPLY,
            self.evdev.ecodes.KEY_KPSLASH: KeyCode.NUMPAD_DIVIDE,
            self.evdev.ecodes.KEY_KPDOT: KeyCode.NUMPAD_DECIMAL,
            self.evdev.ecodes.KEY_KPENTER: KeyCode.NUMPAD_ENTER,

            # Additional special characters
            self.evdev.ecodes.KEY_MINUS: KeyCode.MINUS,
            self.evdev.ecodes.KEY_EQUAL: KeyCode.EQUALS,
            self.evdev.ecodes.KEY_LEFTBRACE: KeyCode.LEFT_BRACKET,
            self.evdev.ecodes.KEY_RIGHTBRACE: KeyCode.RIGHT_BRACKET,
            self.evdev.ecodes.KEY_SEMICOLON: KeyCode.SEMICOLON,
            self.evdev.ecodes.KEY_APOSTROPHE: KeyCode.QUOTE,
            self.evdev.ecodes.KEY_GRAVE: KeyCode.BACKQUOTE,
            self.evdev.ecodes.KEY_BACKSLASH: KeyCode.BACKSLASH,
            self.evdev.ecodes.KEY_COMMA: KeyCode.COMMA,
            self.evdev.ecodes.KEY_DOT: KeyCode.PERIOD,
            self.evdev.ecodes.KEY_SLASH: KeyCode.SLASH,

            # Media keys
            self.evdev.ecodes.KEY_MUTE: KeyCode.MUTE,
            self.evdev.ecodes.KEY_VOLUMEDOWN: KeyCode.VOLUME_DOWN,
            self.evdev.ecodes.KEY_VOLUMEUP: KeyCode.VOLUME_UP,
            self.evdev.ecodes.KEY_PLAYPAUSE: KeyCode.PLAY_PAUSE,
            self.evdev.ecodes.KEY_NEXTSONG: KeyCode.NEXT_TRACK,
            self.evdev.ecodes.KEY_PREVIOUSSONG: KeyCode.PREV_TRACK,

            # Additional function keys (if needed)
            self.evdev.ecodes.KEY_F13: KeyCode.F13,
            self.evdev.ecodes.KEY_F14: KeyCode.F14,
            self.evdev.ecodes.KEY_F15: KeyCode.F15,
            self.evdev.ecodes.KEY_F16: KeyCode.F16,
            self.evdev.ecodes.KEY_F17: KeyCode.F17,
            self.evdev.ecodes.KEY_F18: KeyCode.F18,
            self.evdev.ecodes.KEY_F19: KeyCode.F19,
            self.evdev.ecodes.KEY_F20: KeyCode.F20,
            self.evdev.ecodes.KEY_F21: KeyCode.F21,
            self.evdev.ecodes.KEY_F22: KeyCode.F22,
            self.evdev.ecodes.KEY_F23: KeyCode.F23,
            self.evdev.ecodes.KEY_F24: KeyCode.F24,

            # Additional Media and Special Function Keys
            self.evdev.ecodes.KEY_PLAYPAUSE: KeyCode.MEDIA_PLAY_PAUSE,
            self.evdev.ecodes.KEY_STOP: KeyCode.MEDIA_STOP,
            self.evdev.ecodes.KEY_PREVIOUSSONG: KeyCode.MEDIA_PREVIOUS,
            self.evdev.ecodes.KEY_NEXTSONG: KeyCode.MEDIA_NEXT,
            self.evdev.ecodes.KEY_REWIND: KeyCode.MEDIA_REWIND,
            self.evdev.ecodes.KEY_FASTFORWARD: KeyCode.MEDIA_FAST_FORWARD,
            self.evdev.ecodes.KEY_MUTE: KeyCode.AUDIO_MUTE,
            self.evdev.ecodes.KEY_VOLUMEUP: KeyCode.AUDIO_VOLUME_UP,
            self.evdev.ecodes.KEY_VOLUMEDOWN: KeyCode.AUDIO_VOLUME_DOWN,
            self.evdev.ecodes.KEY_MEDIA: KeyCode.MEDIA_SELECT,
            self.evdev.ecodes.KEY_WWW: KeyCode.WWW,
            self.evdev.ecodes.KEY_MAIL: KeyCode.MAIL,
            self.evdev.ecodes.KEY_CALC: KeyCode.CALCULATOR,
            self.evdev.ecodes.KEY_COMPUTER: KeyCode.COMPUTER,
            self.evdev.ecodes.KEY_SEARCH: KeyCode.APP_SEARCH,
            self.evdev.ecodes.KEY_HOMEPAGE: KeyCode.APP_HOME,
            self.evdev.ecodes.KEY_BACK: KeyCode.APP_BACK,
            self.evdev.ecodes.KEY_FORWARD: KeyCode.APP_FORWARD,
            self.evdev.ecodes.KEY_STOP: KeyCode.APP_STOP,
            self.evdev.ecodes.KEY_REFRESH: KeyCode.APP_REFRESH,
            self.evdev.ecodes.KEY_BOOKMARKS: KeyCode.APP_BOOKMARKS,
            self.evdev.ecodes.KEY_BRIGHTNESSDOWN: KeyCode.BRIGHTNESS_DOWN,
            self.evdev.ecodes.KEY_BRIGHTNESSUP: KeyCode.BRIGHTNESS_UP,
            self.evdev.ecodes.KEY_DISPLAYTOGGLE: KeyCode.DISPLAY_SWITCH,
            self.evdev.ecodes.KEY_KBDILLUMTOGGLE: KeyCode.KEYBOARD_ILLUMINATION_TOGGLE,
            self.evdev.ecodes.KEY_KBDILLUMDOWN: KeyCode.KEYBOARD_ILLUMINATION_DOWN,
            self.evdev.ecodes.KEY_KBDILLUMUP: KeyCode.KEYBOARD_ILLUMINATION_UP,
            self.evdev.ecodes.KEY_EJECTCD: KeyCode.EJECT,
            self.evdev.ecodes.KEY_SLEEP: KeyCode.SLEEP,
            self.evdev.ecodes.KEY_WAKEUP: KeyCode.WAKE,
            self.evdev.ecodes.KEY_COMPOSE: KeyCode.EMOJI,
            self.evdev.ecodes.KEY_MENU: KeyCode.MENU,
            self.evdev.ecodes.KEY_CLEAR: KeyCode.CLEAR,
            self.evdev.ecodes.KEY_SCREENLOCK: KeyCode.LOCK,

            # Mouse Buttons
            self.evdev.ecodes.BTN_LEFT: KeyCode.MOUSE_LEFT,
            self.evdev.ecodes.BTN_RIGHT: KeyCode.MOUSE_RIGHT,
            self.evdev.ecodes.BTN_MIDDLE: KeyCode.MOUSE_MIDDLE,
            self.evdev.ecodes.BTN_SIDE: KeyCode.MOUSE_BACK,
            self.evdev.ecodes.BTN_EXTRA: KeyCode.MOUSE_FORWARD,
            self.evdev.ecodes.BTN_FORWARD: KeyCode.MOUSE_SIDE1,
            self.evdev.ecodes.BTN_BACK: KeyCode.MOUSE_SIDE2,
            self.evdev.ecodes.BTN_TASK: KeyCode.MOUSE_SIDE3,
        }

    def on_input_event(self, event):
        """
        Callback method to be overridden by the InputManager.
        This method is called for each processed input event.
        """
        pass


================================================
File: src/input_backend/input_backend_base.py
================================================


from abc import ABC, abstractmethod
from enums import InputEvent, KeyCode


class InputBackendBase(ABC):
    """
    Abstract base class for input backends.
    This class defines the interface that all input backends must implement.
    """

    @classmethod
    @abstractmethod
    def is_available(cls) -> bool:
        """Check if this input backend is available on the current system."""
        pass

    @abstractmethod
    def start(self):
        """
        Start the input backend.
        This method should initialize any necessary resources and begin listening for input events.
        """
        pass

    @abstractmethod
    def stop(self):
        """
        Stop the input backend.
        This method should clean up any resources and stop listening for input events.
        """
        pass

    @abstractmethod
    def on_input_event(self, event: tuple[KeyCode, InputEvent]):
        """
        Handle an input event.
        This method is called when an input event is detected.
        """
        pass


================================================
File: src/input_backend/pynput_backend.py
================================================
from input_backend.input_backend_base import InputBackendBase
from enums import KeyCode, InputEvent


class PynputBackend(InputBackendBase):
    """
    Input backend implementation using the pynput library.
    """
    @classmethod
    def is_available(cls) -> bool:
        """Check if pynput library is available."""
        try:
            import pynput
            return True
        except ImportError:
            return False

    def __init__(self):
        """Initialize PynputBackend."""
        self.keyboard_listener = None
        self.mouse_listener = None
        self.keyboard = None
        self.mouse = None
        self.key_map = None

    def start(self):
        """Start listening for keyboard and mouse events."""
        if self.keyboard is None or self.mouse is None:
            from pynput import keyboard, mouse
            self.keyboard = keyboard
            self.mouse = mouse
            self.key_map = self._create_key_map()

        self.keyboard_listener = self.keyboard.Listener(
            on_press=self._on_keyboard_press,
            on_release=self._on_keyboard_release
        )
        self.mouse_listener = self.mouse.Listener(
            on_click=self._on_mouse_click
        )
        self.keyboard_listener.start()
        self.mouse_listener.start()

    def stop(self):
        """Stop listening for keyboard and mouse events."""
        if self.keyboard_listener:
            self.keyboard_listener.stop()
            self.keyboard_listener = None
        if self.mouse_listener:
            self.mouse_listener.stop()
            self.mouse_listener = None

    def _translate_key_event(self, native_event) -> tuple[KeyCode, InputEvent]:
        """Translate a pynput event to our internal event representation."""
        pynput_key, is_press = native_event
        key_code = self.key_map.get(pynput_key, KeyCode.SPACE)
        event_type = InputEvent.KEY_PRESS if is_press else InputEvent.KEY_RELEASE
        return key_code, event_type

    def _on_keyboard_press(self, key):
        """Handle keyboard press events."""
        translated_event = self._translate_key_event((key, True))
        self.on_input_event(translated_event)

    def _on_keyboard_release(self, key):
        """Handle keyboard release events."""
        translated_event = self._translate_key_event((key, False))
        self.on_input_event(translated_event)

    def _on_mouse_click(self, x, y, button, pressed):
        """Handle mouse click events."""
        translated_event = self._translate_key_event((button, pressed))
        self.on_input_event(translated_event)

    def _create_key_map(self):
        """Create a mapping from pynput keys to our internal KeyCode enum."""
        return {
            # Modifier keys
            self.keyboard.Key.ctrl_l: KeyCode.CTRL_LEFT,
            self.keyboard.Key.ctrl_r: KeyCode.CTRL_RIGHT,
            self.keyboard.Key.shift_l: KeyCode.SHIFT_LEFT,
            self.keyboard.Key.shift_r: KeyCode.SHIFT_RIGHT,
            self.keyboard.Key.alt_l: KeyCode.ALT_LEFT,
            self.keyboard.Key.alt_r: KeyCode.ALT_RIGHT,
            self.keyboard.Key.cmd_l: KeyCode.META_LEFT,
            self.keyboard.Key.cmd_r: KeyCode.META_RIGHT,

            # Function keys
            self.keyboard.Key.f1: KeyCode.F1,
            self.keyboard.Key.f2: KeyCode.F2,
            self.keyboard.Key.f3: KeyCode.F3,
            self.keyboard.Key.f4: KeyCode.F4,
            self.keyboard.Key.f5: KeyCode.F5,
            self.keyboard.Key.f6: KeyCode.F6,
            self.keyboard.Key.f7: KeyCode.F7,
            self.keyboard.Key.f8: KeyCode.F8,
            self.keyboard.Key.f9: KeyCode.F9,
            self.keyboard.Key.f10: KeyCode.F10,
            self.keyboard.Key.f11: KeyCode.F11,
            self.keyboard.Key.f12: KeyCode.F12,
            self.keyboard.Key.f13: KeyCode.F13,
            self.keyboard.Key.f14: KeyCode.F14,
            self.keyboard.Key.f15: KeyCode.F15,
            self.keyboard.Key.f16: KeyCode.F16,
            self.keyboard.Key.f17: KeyCode.F17,
            self.keyboard.Key.f18: KeyCode.F18,
            self.keyboard.Key.f19: KeyCode.F19,
            self.keyboard.Key.f20: KeyCode.F20,

            # Number keys
            self.keyboard.KeyCode.from_char('1'): KeyCode.ONE,
            self.keyboard.KeyCode.from_char('2'): KeyCode.TWO,
            self.keyboard.KeyCode.from_char('3'): KeyCode.THREE,
            self.keyboard.KeyCode.from_char('4'): KeyCode.FOUR,
            self.keyboard.KeyCode.from_char('5'): KeyCode.FIVE,
            self.keyboard.KeyCode.from_char('6'): KeyCode.SIX,
            self.keyboard.KeyCode.from_char('7'): KeyCode.SEVEN,
            self.keyboard.KeyCode.from_char('8'): KeyCode.EIGHT,
            self.keyboard.KeyCode.from_char('9'): KeyCode.NINE,
            self.keyboard.KeyCode.from_char('0'): KeyCode.ZERO,

            # Letter keys
            self.keyboard.KeyCode.from_char('a'): KeyCode.A,
            self.keyboard.KeyCode.from_char('b'): KeyCode.B,
            self.keyboard.KeyCode.from_char('c'): KeyCode.C,
            self.keyboard.KeyCode.from_char('d'): KeyCode.D,
            self.keyboard.KeyCode.from_char('e'): KeyCode.E,
            self.keyboard.KeyCode.from_char('f'): KeyCode.F,
            self.keyboard.KeyCode.from_char('g'): KeyCode.G,
            self.keyboard.KeyCode.from_char('h'): KeyCode.H,
            self.keyboard.KeyCode.from_char('i'): KeyCode.I,
            self.keyboard.KeyCode.from_char('j'): KeyCode.J,
            self.keyboard.KeyCode.from_char('k'): KeyCode.K,
            self.keyboard.KeyCode.from_char('l'): KeyCode.L,
            self.keyboard.KeyCode.from_char('m'): KeyCode.M,
            self.keyboard.KeyCode.from_char('n'): KeyCode.N,
            self.keyboard.KeyCode.from_char('o'): KeyCode.O,
            self.keyboard.KeyCode.from_char('p'): KeyCode.P,
            self.keyboard.KeyCode.from_char('q'): KeyCode.Q,
            self.keyboard.KeyCode.from_char('r'): KeyCode.R,
            self.keyboard.KeyCode.from_char('s'): KeyCode.S,
            self.keyboard.KeyCode.from_char('t'): KeyCode.T,
            self.keyboard.KeyCode.from_char('u'): KeyCode.U,
            self.keyboard.KeyCode.from_char('v'): KeyCode.V,
            self.keyboard.KeyCode.from_char('w'): KeyCode.W,
            self.keyboard.KeyCode.from_char('x'): KeyCode.X,
            self.keyboard.KeyCode.from_char('y'): KeyCode.Y,
            self.keyboard.KeyCode.from_char('z'): KeyCode.Z,

            # Special keys
            self.keyboard.Key.space: KeyCode.SPACE,
            self.keyboard.Key.enter: KeyCode.ENTER,
            self.keyboard.Key.tab: KeyCode.TAB,
            self.keyboard.Key.backspace: KeyCode.BACKSPACE,
            self.keyboard.Key.esc: KeyCode.ESC,
            self.keyboard.Key.insert: KeyCode.INSERT,
            self.keyboard.Key.delete: KeyCode.DELETE,
            self.keyboard.Key.home: KeyCode.HOME,
            self.keyboard.Key.end: KeyCode.END,
            self.keyboard.Key.page_up: KeyCode.PAGE_UP,
            self.keyboard.Key.page_down: KeyCode.PAGE_DOWN,
            self.keyboard.Key.caps_lock: KeyCode.CAPS_LOCK,
            self.keyboard.Key.num_lock: KeyCode.NUM_LOCK,
            self.keyboard.Key.scroll_lock: KeyCode.SCROLL_LOCK,
            self.keyboard.Key.pause: KeyCode.PAUSE,
            self.keyboard.Key.print_screen: KeyCode.PRINT_SCREEN,

            # Arrow keys
            self.keyboard.Key.up: KeyCode.UP,
            self.keyboard.Key.down: KeyCode.DOWN,
            self.keyboard.Key.left: KeyCode.LEFT,
            self.keyboard.Key.right: KeyCode.RIGHT,

            # Numpad keys
            self.keyboard.Key.num_lock: KeyCode.NUM_LOCK,
            self.keyboard.KeyCode.from_vk(96): KeyCode.NUMPAD_0,
            self.keyboard.KeyCode.from_vk(97): KeyCode.NUMPAD_1,
            self.keyboard.KeyCode.from_vk(98): KeyCode.NUMPAD_2,
            self.keyboard.KeyCode.from_vk(99): KeyCode.NUMPAD_3,
            self.keyboard.KeyCode.from_vk(100): KeyCode.NUMPAD_4,
            self.keyboard.KeyCode.from_vk(101): KeyCode.NUMPAD_5,
            self.keyboard.KeyCode.from_vk(102): KeyCode.NUMPAD_6,
            self.keyboard.KeyCode.from_vk(103): KeyCode.NUMPAD_7,
            self.keyboard.KeyCode.from_vk(104): KeyCode.NUMPAD_8,
            self.keyboard.KeyCode.from_vk(105): KeyCode.NUMPAD_9,
            self.keyboard.KeyCode.from_vk(107): KeyCode.NUMPAD_ADD,
            self.keyboard.KeyCode.from_vk(109): KeyCode.NUMPAD_SUBTRACT,
            self.keyboard.KeyCode.from_vk(106): KeyCode.NUMPAD_MULTIPLY,
            self.keyboard.KeyCode.from_vk(111): KeyCode.NUMPAD_DIVIDE,
            self.keyboard.KeyCode.from_vk(110): KeyCode.NUMPAD_DECIMAL,

            # Additional special characters
            self.keyboard.KeyCode.from_char('-'): KeyCode.MINUS,
            self.keyboard.KeyCode.from_char('='): KeyCode.EQUALS,
            self.keyboard.KeyCode.from_char('['): KeyCode.LEFT_BRACKET,
            self.keyboard.KeyCode.from_char(']'): KeyCode.RIGHT_BRACKET,
            self.keyboard.KeyCode.from_char(';'): KeyCode.SEMICOLON,
            self.keyboard.KeyCode.from_char("'"): KeyCode.QUOTE,
            self.keyboard.KeyCode.from_char('`'): KeyCode.BACKQUOTE,
            self.keyboard.KeyCode.from_char('\\'): KeyCode.BACKSLASH,
            self.keyboard.KeyCode.from_char(','): KeyCode.COMMA,
            self.keyboard.KeyCode.from_char('.'): KeyCode.PERIOD,
            self.keyboard.KeyCode.from_char('/'): KeyCode.SLASH,

            # Media keys
            self.keyboard.Key.media_volume_mute: KeyCode.AUDIO_MUTE,
            self.keyboard.Key.media_volume_down: KeyCode.AUDIO_VOLUME_DOWN,
            self.keyboard.Key.media_volume_up: KeyCode.AUDIO_VOLUME_UP,
            self.keyboard.Key.media_play_pause: KeyCode.MEDIA_PLAY_PAUSE,
            self.keyboard.Key.media_next: KeyCode.MEDIA_NEXT,
            self.keyboard.Key.media_previous: KeyCode.MEDIA_PREVIOUS,

            # Mouse buttons
            self.mouse.Button.left: KeyCode.MOUSE_LEFT,
            self.mouse.Button.right: KeyCode.MOUSE_RIGHT,
            self.mouse.Button.middle: KeyCode.MOUSE_MIDDLE,
        }

    def on_input_event(self, event):
        """
        Callback method to be set by the InputManager.
        This method is called for each processed input event.
        """
        pass


================================================
File: src/transcription_backend/faster_whisper_backend.py
================================================
import queue
import time
import threading
import numpy as np
from typing import Dict, Any, Generator, List

from transcription_backend.transcription_backend_base import TranscriptionBackendBase
from config_manager import ConfigManager


class FasterWhisperBackend(TranscriptionBackendBase):
    def __init__(self):
        self.WhisperModel = None
        self.config = None
        self.model = None
        self._initialized = False
        self.current_utterance_buffer: List[np.ndarray] = []
        self.last_vad_duration = 0.0
        self.last_duration = 0.0

    def is_initialized(self) -> bool:
        return self._initialized

    def initialize(self, options: Dict[str, Any]):
        try:
            from faster_whisper import WhisperModel
            self.WhisperModel = WhisperModel
        except ImportError:
            raise RuntimeError("Failed to import faster_whisper. Make sure it's installed.")

        self.config = options
        self._load_model()
        if not self.model:
            raise RuntimeError("Failed to initialize any Whisper model.")
        self._initialized = True

    def _load_model(self):
        ConfigManager.log_print('Creating Faster Whisper model...')
        compute_type = self.config.get('compute_type', 'default')
        model_path = self.config.get('model_path', '')
        device = self.config.get('device', 'auto')
        model_name = self.config.get('model', 'base')

        if model_path:
            try:
                ConfigManager.log_print(f'Loading model from: {model_path}')
                self.model = self.WhisperModel(model_path,
                                               device=device,
                                               compute_type=compute_type,
                                               download_root=None)
                ConfigManager.log_print('Model loaded successfully from specified path.')
                return
            except Exception as e:
                ConfigManager.log_print(f'Error loading model from path: {e}')
                ConfigManager.log_print('Falling back to online models...')

        # If model_path is empty or failed to load, use online models
        try:
            ConfigManager.log_print(f'Attempting to load {model_name} model...')
            self.model = self.WhisperModel(model_name,
                                           device=device,
                                           compute_type=compute_type)
            ConfigManager.log_print(f'{model_name.capitalize()} model loaded successfully.')
        except Exception as e:
            ConfigManager.log_print(f'Error loading {model_name} model: {e}')
            ConfigManager.log_print('Falling back to base model on CPU...')
            try:
                self.model = self.WhisperModel('base',
                                               device='cpu',
                                               compute_type='default')
                ConfigManager.log_print('Base model loaded successfully on CPU.')
            except Exception as e:
                raise RuntimeError(f"Failed to load any Whisper model. Last error: {e}")

    def transcribe_complete(self, audio_data: np.ndarray, sample_rate: int = 16000,
                            channels: int = 1, language: str = 'auto') -> Dict[str, Any]:
        if not self.model:
            return {
                'raw_text': '',
                'language': 'en',
                'error': 'Model not initialized.'
            }

        try:
            audio_data = self._normalize_audio(audio_data)
            segments, info = self.model.transcribe(
                audio=audio_data,
                language=language if language != 'auto' else None,
                initial_prompt=self.config.get('initial_prompt'),
                condition_on_previous_text=self.config.get('condition_on_previous_text', True),
                temperature=self.config.get('temperature', 0.0),
                vad_filter=self.config.get('vad_filter', False),
            )

            transcription = ''.join([segment.text for segment in segments])

            return {
                'raw_text': transcription,
                'language': info.language,
                'error': '',
            }
        except Exception as e:
            return {
                'raw_text': '',
                'language': 'en',
                'error': f'Unexpected error during transcription: {e}'
            }

    def process_stream(self, audio_queue: queue.Queue,
                       stop_event: threading.Event) -> Generator[Dict[str, Any], None, None]:
        """
        This method orchestrates the streaming transcription process. It continuously collects
        audio chunks from an input queue and processes them at regular intervals, as defined by
        min_transcription_interval. The method ensures that transcription only occurs after
        a sufficient amount of time has passed since the last transcription, allowing for
        a reasonable accumulation of audio data. When a sentinel value (None) is encountered in
        the queue, it triggers the final transcription of any remaining audio. The method also
        initializes the sample rate from the first chunk and uses a short sleep to prevent
        busy-waiting, ensuring efficient CPU usage.
        """
        self.current_utterance_buffer = []
        accumulated_chunks: List[np.ndarray] = []
        last_transcription_time = None
        sample_rate = None
        min_transcription_interval = self.config.get('min_transcription_interval', 0.5)
        if min_transcription_interval < 0.2:
            min_transcription_interval = 0.2

        while not stop_event.is_set():
            # Collect all available chunks
            while True:
                try:
                    audio_data = audio_queue.get_nowait()
                    if audio_data is None:  # Sentinel value
                        if accumulated_chunks or self.current_utterance_buffer:
                            yield from self._process_chunks(accumulated_chunks,
                                                            sample_rate, is_final=True)
                        return
                    accumulated_chunks.append(audio_data['audio_chunk'])
                    if sample_rate is None:
                        sample_rate = audio_data['sample_rate']
                        last_transcription_time = time.time()  # Initialize the time for chunk #1
                except queue.Empty:
                    break

            if sample_rate is None:
                continue  # No audio data received yet

            current_time = time.time()

            # Process accumulated chunks if enough time has passed
            if current_time - last_transcription_time >= min_transcription_interval:
                if accumulated_chunks:
                    yield from self._process_chunks(accumulated_chunks, sample_rate)
                    accumulated_chunks = []
                    last_transcription_time = current_time

            # Short sleep to prevent busy-waiting
            time.sleep(0.1)

    def _process_chunks(self, new_chunks: List[np.ndarray], sample_rate: int,
                        is_final: bool = False) -> Generator[Dict[str, Any], None, None]:
        """
        This method is responsible for processing a list of accumulated audio chunks. It extends
        the current utterance buffer with new chunks, normalizes the audio data, and then
        transcribes it using the Whisper model. The method handles two special cases: resetting
        the buffer when prolonged silence is detected and handling silence detected by Whisper's
        built-in voice activity detection (VAD). If neither case applies, the method proceeds
        to check for punctuation-based endpoints in the transcription. It yields the transcription
        results, marking utterances as complete or ongoing based on the presence of punctuation
        and the finality of the audio data.
        """
        try:
            self.current_utterance_buffer.extend(new_chunks)
            audio_data = np.concatenate(self.current_utterance_buffer)
            audio_data = self._normalize_audio(audio_data)

            segments, info = self.model.transcribe(
                audio=audio_data,
                language=self.config.get('language', None),
                initial_prompt=self.config.get('initial_prompt'),
                condition_on_previous_text=self.config.get('condition_on_previous_text', True),
                temperature=self.config.get('temperature', 0.0),
                vad_filter=self.config.get('vad_filter', True),
            )

            # Reset silent buffer
            if info.duration > 10.0 and info.duration_after_vad == 0.0:
                # Prune 8 seconds of silence
                self._update_buffer(audio_data, 8.0, sample_rate)
                return

            # Convert generator to list
            segments_list = list(segments)

            # Handle VAD-based silence detection
            vad_silence_result = self._handle_vad_silence(info, segments_list)
            if vad_silence_result:
                yield vad_silence_result
                return

            # Handle punctuation-based endpoint detection
            yield from self._handle_punctuation_endpoint(info, segments_list, audio_data,
                                                         sample_rate, is_final)

        except Exception as e:
            yield {
                'raw_text': '',
                'language': 'en',
                'error': f'Unexpected error during streaming transcription: {e}',
                'is_utterance_end': True
            }

    def _handle_vad_silence(self, info, segments_list):
        """
        This method detects silence in the audio stream using the duration information provided
        by Whisper's VAD. If a significant duration of silence (defined in vad_silence_duration)
        is detected after an utterance, it yields the transcription as a complete utterance and
        resets the internal state to prepare for the next utterance.
        """
        if info.duration_after_vad > 0.0:
            if info.duration_after_vad != self.last_vad_duration:
                self.last_vad_duration = info.duration_after_vad
                self.last_duration = info.duration
            if info.duration - self.last_duration >= self.config.get('vad_silence_duration', 2.0):
                # Yield completed utterance due to silence
                completed_text = ' '.join([seg.text for seg in segments_list])
                # Reset buffer and VAD update time
                self.current_utterance_buffer = []
                self.last_vad_duration = 0.0
                self.last_duration = 0.0
                return {
                    'raw_text': completed_text,
                    'language': info.language,
                    'error': '',
                    'is_utterance_end': True
                }
        return None

    def _handle_punctuation_endpoint(self, info, segments_list, audio_data, sample_rate, is_final):
        """
        This method analyzes the transcription segments to find natural endpoints based on
        punctuation and Whisper segmentation. It identifies the last segment that ends with
        punctuation and considers it the end of a complete utterance. The method then yields
        the complete utterance and updates the buffer to only include audio data beyond this
        endpoint. If no punctuation-based endpoint is found, it yields the entire transcription
        as ongoing.
        """
        # Find the last segment with ending punctuation
        endpoint_index = self._find_utterance_endpoint(segments_list)

        if endpoint_index is not None and endpoint_index < len(segments_list) - 1:
            # Yield completed utterance
            completed_text = ' '.join([seg.text for seg in segments_list[:endpoint_index+1]])
            yield {
                'raw_text': completed_text,
                'language': info.language,
                'error': '',
                'is_utterance_end': True
            }

            # Update buffer
            self._update_buffer(audio_data, segments_list[endpoint_index+1].start, sample_rate)

            # Yield ongoing utterance
            ongoing_utterance = ' '.join([seg.text for seg in segments_list[endpoint_index+1:]])
        else:
            # No clear endpoint, yield entire transcription as ongoing
            ongoing_utterance = ' '.join([seg.text for seg in segments_list])

        yield {
            'raw_text': ongoing_utterance,
            'language': info.language,
            'error': '',
            'is_utterance_end': is_final
        }

    def _find_utterance_endpoint(self, segments_list):
        for i in range(len(segments_list) - 2, -1, -1):
            if segments_list[i].text.strip().endswith(('.', '!', '?')):
                return i
        return None

    def _update_buffer(self, audio_data, start_time, sample_rate):
        start_sample = int(start_time * sample_rate)
        self.current_utterance_buffer = [audio_data[start_sample:]]

    def _normalize_audio(self, audio_data: np.ndarray) -> np.ndarray:
        if audio_data.dtype == np.float32 and np.abs(audio_data).max() <= 1.0:
            return audio_data
        elif audio_data.dtype == np.float32:
            return np.clip(audio_data, -1.0, 1.0)
        elif audio_data.dtype in [np.int16, np.int32]:
            return audio_data.astype(np.float32) / np.iinfo(audio_data.dtype).max
        else:
            raise ValueError(f"Unsupported audio format: {audio_data.dtype}")

    def get_preferred_streaming_chunk_size(self):
        return 3200  # 200ms at 16kHz

    def cleanup(self):
        self.model = None
        self._initialized = False


================================================
File: src/transcription_backend/openai_backend.py
================================================
import numpy as np
import soundfile as sf
import os
import io
from typing import Dict, Any
from scipy import signal

from transcription_backend.transcription_backend_base import TranscriptionBackendBase
from config_manager import ConfigManager


class OpenAIBackend(TranscriptionBackendBase):
    def __init__(self):
        self.OpenAI = None
        self.config = None
        self.client = None
        self._initialized = False

    def is_initialized(self) -> bool:
        return self._initialized

    def initialize(self, options: Dict[str, Any]):
        try:
            from openai import OpenAI
        except ImportError as e:
            raise RuntimeError(f"Failed to import required modules: {e}. "
                               f"Make sure OpenAI is installed.")

        self.OpenAI = OpenAI
        self.config = options
        api_key = self.config.get('api_key') or os.getenv('OPENAI_API_KEY')
        base_url = self.config.get('base_url') or 'https://api.openai.com/v1'

        if not api_key:
            raise RuntimeError("OpenAI API key not found. "
                               "Please set it in the configuration or as an environment variable.")

        try:
            self.client = self.OpenAI(api_key=api_key, base_url=base_url)
            ConfigManager.log_print("OpenAI client initialized successfully.")
            self._initialized = True
        except Exception as e:
            raise RuntimeError(f"Failed to initialize OpenAI client: {e}")

    def transcribe_complete(self, audio_data: np.ndarray, sample_rate: int = 16000,
                            channels: int = 1, language: str = 'auto') -> Dict[str, Any]:
        if not self.client:
            return {'raw_text': '', 'language': language, 'error': "OpenAI client not initialized"}

        # Prepare audio data
        try:
            audio_data = self._prepare_audio_data(audio_data, sample_rate, channels)
        except Exception as e:
            return {'raw_text': '', 'language': language,
                    'error': f"Error preparing audio data: {str(e)}"}

        # Convert numpy array to WAV file
        byte_io = io.BytesIO()
        sf.write(byte_io, audio_data, 16000, format='wav')
        byte_io.seek(0)

        try:
            response = self.client.audio.transcriptions.create(
                model=self.config.get('model', 'whisper-1'),
                file=('audio.wav', byte_io, 'audio/wav'),
                language=language if language != 'auto' else None,
                prompt=self.config.get('initial_prompt'),
                temperature=self.config.get('temperature', 0.0),
            )
            return {
                'raw_text': response.text,
                'language': language,  # OpenAI doesn't return detected language
                'error': '',
            }
        except Exception as e:
            return {
                'raw_text': '',
                'language': language,
                'error': f"OpenAI transcription failed: {str(e)}",
            }

    def _prepare_audio_data(self, audio_data: np.ndarray, sample_rate: int,
                            channels: int) -> np.ndarray:
        # OpenAI expects 16kHz mono audio
        if sample_rate != 16000 or channels != 1:
            # Resample to 16kHz
            if sample_rate != 16000:
                number_of_samples = round(len(audio_data) * 16000 / sample_rate)
                audio_data = signal.resample(audio_data, number_of_samples)

            # Convert to mono if necessary
            if channels > 1:
                audio_data = np.mean(audio_data, axis=1)

        # Ensure audio_data is in the correct format (float32, range [-1, 1])
        if audio_data.dtype == np.float32 and np.abs(audio_data).max() <= 1.0:
            # Data is already in the correct format
            pass
        elif audio_data.dtype == np.float32:
            # Data is float32 but may not be in [-1, 1] range
            audio_data = np.clip(audio_data, -1.0, 1.0)
        elif audio_data.dtype in [np.int16, np.int32]:
            # Convert integer PCM to float32
            audio_data = audio_data.astype(np.float32) / np.iinfo(audio_data.dtype).max
        else:
            raise ValueError(f"Unsupported audio format: {audio_data.dtype}")

        return audio_data

    def cleanup(self):
        self.client = None
        self._initialized = False


================================================
File: src/transcription_backend/transcription_backend_base.py
================================================
import numpy as np
import threading
import queue
from abc import ABC, abstractmethod
from typing import Dict, Any, Optional, Generator


class TranscriptionBackendBase(ABC):
    @abstractmethod
    def is_initialized(self) -> bool:
        pass

    @abstractmethod
    def initialize(self, options: Dict[str, Any]):
        pass

    @abstractmethod
    def transcribe_complete(self, audio_data: np.ndarray, sample_rate: int = 16000,
                            channels: int = 1, language: str = 'auto') -> Dict[str, Any]:
        pass

    @abstractmethod
    def cleanup(self):
        pass

    def get_preferred_streaming_chunk_size(self) -> Optional[int]:
        return None

    def process_stream(self, audio_queue: queue.Queue,
                       stop_event: threading.Event) -> Generator[Dict[str, Any], None, None]:
        yield {
            'raw_text': '',
            'language': 'en',
            'error': 'Streaming transcription is not supported by this backend.',
            'is_utterance_end': True
        }
        # Consume the queue to prevent it from filling up
        while not stop_event.is_set():
            try:
                audio_chunk = audio_queue.get(timeout=0.1)
                if audio_chunk is None:
                    break
            except queue.Empty:
                continue


================================================
File: src/transcription_backend/vosk_backend.py
================================================
import numpy as np
from typing import Dict, Any, Generator
import json
import queue
import threading

from transcription_backend.transcription_backend_base import TranscriptionBackendBase
from config_manager import ConfigManager


class VoskBackend(TranscriptionBackendBase):
    def __init__(self):
        self.vosk = None
        self.model = None
        self.recognizer = None
        self.config = None
        self._initialized = False

    def is_initialized(self) -> bool:
        return self._initialized

    def initialize(self, options: Dict[str, Any]):
        self.config = options
        try:
            import vosk
            self.vosk = vosk
        except ImportError:
            raise RuntimeError("Failed to import vosk. Make sure it's installed.")

        try:
            model_path = self.config.get('model_path', "model")
            self.model = self.vosk.Model(model_path)
            sample_rate = self.config.get('sample_rate', 16000)
            self.recognizer = self.vosk.KaldiRecognizer(self.model, sample_rate)
            ConfigManager.log_print("Vosk model initialized successfully.")
            self._initialized = True
        except Exception as e:
            raise RuntimeError(f"Failed to initialize Vosk model: {e}")

    def transcribe_complete(self, audio_data: np.ndarray, sample_rate: int = 16000,
                            channels: int = 1, language: str = 'auto') -> Dict[str, Any]:
        if not self.recognizer:
            return {
                'raw_text': '',
                'language': 'en',
                'error': 'Recognizer not initialized',
                'is_utterance_end': True
            }

        # Ensure audio_data is in the correct format (16-bit PCM)
        if audio_data.dtype != np.int16:
            audio_data = (audio_data * 32767).astype(np.int16)

        try:
            self.recognizer.AcceptWaveform(audio_data.tobytes())
            result = json.loads(self.recognizer.FinalResult())

            return {
                'raw_text': result.get('text', ''),
                'language': 'en',
                'error': '',
                'is_utterance_end': True
            }
        except Exception as e:
            return {
                'raw_text': '',
                'language': 'en',
                'error': f'Unexpected error during transcription: {e}',
                'is_utterance_end': True
            }

    def process_stream(self, audio_queue: queue.Queue,
                       stop_event: threading.Event) -> Generator[Dict[str, Any], None, None]:
        if not self.recognizer:
            yield {
                'raw_text': '',
                'language': 'en',
                'error': 'Recognizer not initialized',
                'is_utterance_end': True
            }
            return

        error_reported = False
        try:
            while not stop_event.is_set():
                try:
                    audio_data = audio_queue.get(timeout=0.1)
                    if audio_data is None:  # Sentinel value
                        break

                    audio_chunk = audio_data['audio_chunk']
                    # Ensure audio_chunk is in the correct format (16-bit PCM)
                    if audio_chunk.dtype != np.int16:
                        audio_chunk = (audio_chunk * 32767).astype(np.int16)

                    is_utterance_end = self.recognizer.AcceptWaveform(audio_chunk.tobytes())
                    if is_utterance_end:
                        result = json.loads(self.recognizer.Result())
                    else:
                        result = json.loads(self.recognizer.PartialResult())
                    yield {
                        'raw_text': (result.get('partial', '')
                                     if not is_utterance_end
                                     else result.get('text', '')),
                        'language': 'en',
                        'error': '',
                        'is_utterance_end': is_utterance_end
                    }

                except queue.Empty:
                    continue

        except Exception as e:
            if not error_reported:
                yield {
                    'raw_text': '',
                    'language': 'en',
                    'error': f'Unexpected error during streaming transcription: {e}',
                    'is_utterance_end': True
                }
                error_reported = True

        # Final result after the stream ends
        try:
            final_result = json.loads(self.recognizer.FinalResult())
            yield {
                'raw_text': final_result.get('text', ''),
                'language': 'en',
                'error': '',
                'is_utterance_end': True
            }
        except Exception as e:
            if not error_reported:
                yield {
                    'raw_text': '',
                    'language': 'en',
                    'error': f'Unexpected error during stream finalization: {e}',
                    'is_utterance_end': True
                }

    def get_preferred_streaming_chunk_size(self):
        return 4096

    def cleanup(self):
        self.recognizer = None
        self.model = None
        self.vosk = None
        self._initialized = False


================================================
File: src/ui/base_window.py
================================================
from PyQt6.QtCore import Qt, QRectF
from PyQt6.QtGui import QPainter, QBrush, QColor, QFont, QPainterPath, QGuiApplication
from PyQt6.QtWidgets import QWidget, QLabel, QPushButton, QVBoxLayout, QHBoxLayout, QMainWindow


class BaseWindow(QMainWindow):
    def __init__(self, title, width, height):
        """
        Initialize the base window.
        """
        super().__init__()
        self.initUI(title, width, height)
        self.setWindowPosition()
        self.is_dragging = False

    def initUI(self, title, width, height):
        """
        Initialize the user interface.
        """
        self.setWindowTitle(title)
        self.setWindowFlags(Qt.WindowType.FramelessWindowHint)
        self.setAttribute(Qt.WidgetAttribute.WA_TranslucentBackground, True)
        self.setFixedSize(width, height)

        self.main_widget = QWidget(self)
        self.main_layout = QVBoxLayout(self.main_widget)
        self.main_layout.setContentsMargins(10, 10, 10, 10)

        # Create a widget for the title bar
        title_bar = QWidget()
        title_bar_layout = QHBoxLayout(title_bar)
        title_bar_layout.setContentsMargins(0, 0, 0, 0)

        # Add the title label
        title_label = QLabel('WhisperWriter')
        title_label.setFont(QFont('Segoe UI', 12))
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title_label.setStyleSheet("color: #404040;")

        # Create a widget for the close button
        close_button_widget = QWidget()
        close_button_layout = QHBoxLayout(close_button_widget)
        close_button_layout.setContentsMargins(0, 0, 0, 0)

        close_button = QPushButton('×')
        close_button.setFixedSize(25, 25)
        close_button.setStyleSheet("""
            QPushButton {
                background-color: transparent;
                border: none;
                color: #404040;
            }
            QPushButton:hover {
                color: #000000;
            }
        """)
        close_button.clicked.connect(self.handleCloseButton)

        close_button_layout.addWidget(close_button, alignment=Qt.AlignmentFlag.AlignRight)

        # Add widgets to the title bar layout
        title_bar_layout.addWidget(QWidget(), 1)  # Left spacer
        title_bar_layout.addWidget(title_label, 3)  # Title (with more width)
        title_bar_layout.addWidget(close_button_widget, 1)  # Close button

        self.main_layout.addWidget(title_bar)
        self.setCentralWidget(self.main_widget)

    def setWindowPosition(self):
        """
        Set the window position to the center of the screen.
        """
        center_point = QGuiApplication.primaryScreen().availableGeometry().center()
        frame_geometry = self.frameGeometry()
        frame_geometry.moveCenter(center_point)
        self.move(frame_geometry.topLeft())

    def handleCloseButton(self):
        """
        Close the window.
        """
        self.close()

    def mousePressEvent(self, event):
        """
        Allow the window to be moved by clicking and dragging anywhere on the window.
        """
        if event.button() == Qt.MouseButton.LeftButton:
            self.is_dragging = True
            self.start_position = event.globalPosition().toPoint() - self.frameGeometry().topLeft()
            event.accept()

    def mouseMoveEvent(self, event):
        """
        Move the window when dragging.
        """
        if Qt.MouseButton.LeftButton and self.is_dragging:
            self.move(event.globalPosition().toPoint() - self.start_position)
            event.accept()

    def mouseReleaseEvent(self, event):
        """
        Stop dragging the window.
        """
        self.is_dragging = False

    def paintEvent(self, event):
        """
        Create a rounded rectangle with a semi-transparent white background.
        """
        path = QPainterPath()
        path.addRoundedRect(QRectF(self.rect()), 20, 20)
        painter = QPainter(self)
        painter.setRenderHint(QPainter.RenderHint.Antialiasing)
        painter.setBrush(QBrush(QColor(255, 255, 255, 220)))
        painter.setPen(Qt.PenStyle.NoPen)
        painter.drawPath(path)


================================================
File: src/ui/main_window.py
================================================
import os
import sys
from PyQt6.QtGui import QFont
from PyQt6.QtWidgets import QPushButton, QHBoxLayout
from PyQt6.QtCore import pyqtSignal

from ui.base_window import BaseWindow

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))


class MainWindow(BaseWindow):
    open_settings = pyqtSignal()
    start_listening = pyqtSignal()
    close_app = pyqtSignal()

    def __init__(self):
        """
        Initialize the main window.
        """
        super().__init__('WhisperWriter', 320, 180)
        self.initMainUI()

    def initMainUI(self):
        """
        Initialize the main user interface.
        """
        start_btn = QPushButton('Start')
        start_btn.setFont(QFont('Segoe UI', 10))
        start_btn.setFixedSize(120, 60)
        start_btn.clicked.connect(self.start_pressed)

        settings_btn = QPushButton('Settings')
        settings_btn.setFont(QFont('Segoe UI', 10))
        settings_btn.setFixedSize(120, 60)
        settings_btn.clicked.connect(self.open_settings.emit)

        button_layout = QHBoxLayout()
        button_layout.addStretch(1)
        button_layout.addWidget(start_btn)
        button_layout.addWidget(settings_btn)
        button_layout.addStretch(1)

        self.main_layout.addStretch(1)
        self.main_layout.addLayout(button_layout)
        self.main_layout.addStretch(1)

    def closeEvent(self, event):
        """
        Close the application when the main window is closed.
        """
        self.close_app.emit()
        event.ignore()

    def start_pressed(self):
        """
        Emit the start_listening signal when the start button is pressed.
        """
        self.start_listening.emit()

    def hide_main_window(self):
        """
        Hide the main window.
        """
        self.hide()


================================================
File: src/ui/settings_window.py
================================================
import os
from PyQt6.QtWidgets import (QWidget, QHBoxLayout, QTabWidget, QGroupBox, QGridLayout,
                             QLabel, QLineEdit, QComboBox, QCheckBox, QPushButton, QFileDialog,
                             QScrollArea, QToolButton, QMessageBox, QVBoxLayout, QInputDialog)
from PyQt6.QtCore import Qt, pyqtSignal
from PyQt6.QtGui import QIcon, QIntValidator, QDoubleValidator

from config_manager import ConfigManager


class SettingsWindow(QWidget):
    close_window = pyqtSignal()

    def __init__(self):
        super().__init__()
        self.setWindowTitle("Settings")
        self.resize(700, 700)
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout()
        self.tabs = QTabWidget()
        layout.addWidget(self.tabs)

        self.create_tabs()
        self.create_buttons(layout)
        self.setLayout(layout)

    def create_tabs(self):
        # Global options tab
        global_tab = self.create_global_tab()
        self.tabs.addTab(global_tab, "Global Options")

        # Profile tabs
        profiles = ConfigManager.get_profiles()
        for profile in profiles:
            profile_name = profile['name']
            profile_tab = self.create_profile_tab(profile_name)
            self.tabs.addTab(profile_tab, profile_name)

        # Add profile button
        self.tabs.setCornerWidget(self.create_add_profile_button(), Qt.Corner.TopRightCorner)

    def create_global_tab(self):
        tab = QScrollArea()
        tab_widget = QWidget()
        tab_layout = QVBoxLayout(tab_widget)

        global_options = ConfigManager.get_section('global_options')
        self.create_section_widgets(tab_layout, global_options, 'global_options')

        # Add stretch factor to push widgets to the top
        tab_layout.addStretch(1)

        tab.setWidget(tab_widget)
        tab.setWidgetResizable(True)
        return tab

    def create_profile_tab(self, profile_name):
        tab = QScrollArea()
        tab_widget = QWidget()
        tab_layout = QVBoxLayout()

        profile_config = ConfigManager.get_section('profiles', profile_name)

        self.add_profile_sections(tab_layout, profile_name, profile_config)
        self.add_profile_management_buttons(tab_layout, profile_name)

        tab_widget.setLayout(tab_layout)
        tab.setWidget(tab_widget)
        tab.setWidgetResizable(True)
        return tab

    def add_profile_sections(self, layout, profile_name, profile_config):
        # Define the order of sections
        section_order = ['activation_key', 'backend_type', 'backend', 'recording_options',
                         'post_processing']

        # Add sections in the specified order, then any remaining sections
        for section_name in section_order + list(set(profile_config.keys()) - set(section_order)):
            if section_name in profile_config and section_name != 'name':
                self.add_section(layout, profile_name, profile_config, section_name)

    def add_section(self, layout, profile_name, profile_config, section_name):
        section = profile_config[section_name]
        if isinstance(section, dict):
            group_box = QGroupBox(section_name.replace('_', ' ').capitalize())
            group_box.setObjectName(f"{profile_name}_{section_name}")
            group_layout = QVBoxLayout()
            self.create_section_widgets(group_layout, section,
                                        f'profiles.{profile_name}.{section_name}')
            group_box.setLayout(group_layout)
            layout.addWidget(group_box)
        else:
            widget = self.create_setting_widget(f'profiles.{profile_name}.{section_name}', section)
            layout.addWidget(widget)

        # Add backend type change listener
        if section_name == 'backend_type' and isinstance(widget.input_widget, QComboBox):
            widget.input_widget.currentTextChanged.connect(
                lambda value, pn=profile_name: self.update_backend_options(pn, value)
            )

    def add_profile_management_buttons(self, layout, profile_name):
        delete_button = QPushButton(f"Delete {profile_name}")
        delete_button.clicked.connect(lambda: self.delete_profile(profile_name))
        layout.addWidget(delete_button)

        rename_button = QPushButton("Rename Profile")
        rename_button.clicked.connect(lambda: self.rename_profile(profile_name))
        layout.addWidget(rename_button)

    def rename_profile(self, old_name):
        new_name, ok = QInputDialog.getText(self, 'Rename Profile', 'Enter new profile name:')
        if ok and new_name:
            if ConfigManager.rename_profile(old_name, new_name):
                # Update tab name
                for i in range(self.tabs.count()):
                    if self.tabs.tabText(i) == old_name:
                        self.tabs.setTabText(i, new_name)
                        break

                # Update the tab's content
                new_tab = self.create_profile_tab(new_name)
                self.tabs.removeTab(i)
                self.tabs.insertTab(i, new_tab, new_name)

                # Update active profiles widget
                self.update_active_profiles_widget()

                # Inform user of successful rename
                QMessageBox.information(self,
                                        'Profile Renamed',
                                        f'Profile "{old_name}" has been renamed to "{new_name}".')
            else:
                QMessageBox.warning(self,
                                    'Rename Failed',
                                    f'The name "{new_name}" is already in use or '
                                    f'the profile could not be found.')

    def update_backend_options(self, profile_name, backend_type):
        ConfigManager.set_value(f'profiles.{profile_name}.backend_type', backend_type)

        # Refresh the backend options
        backend_group = self.findChild(QGroupBox, f"{profile_name}_backend")
        if backend_group:
            backend_layout = backend_group.layout()
            # Clear existing widgets
            while backend_layout.count():
                item = backend_layout.takeAt(0)
                widget = item.widget()
                if widget:
                    widget.deleteLater()

            # Add new widgets
            backend_config = ConfigManager.get_section('backend', profile_name)
            self.create_section_widgets(backend_layout, backend_config,
                                        f'profiles.{profile_name}.backend')
        else:
            print(f"Backend group for {profile_name} not found")  # Debug print
            # If the backend group doesn't exist, recreate the entire profile tab
            for i in range(self.tabs.count()):
                if self.tabs.tabText(i) == profile_name:
                    new_tab = self.create_profile_tab(profile_name)
                    self.tabs.removeTab(i)
                    self.tabs.insertTab(i, new_tab, profile_name)
                    self.tabs.setCurrentIndex(i)
                    break

        # Force the UI to update
        self.update()

    def create_section_widgets(self, layout, section, section_path):
        if not isinstance(section, dict):
            widget = self.create_setting_widget(section_path, section)
            if widget:
                layout.addWidget(widget)
            return

        # Define the order of elements within sections
        element_order = {
            'global_options': [
                'active_profiles', 'input_backend', 'print_to_terminal',
                'status_update_mode', 'noise_on_completion'
            ],
            'recording_options': [
                'sound_device', 'gain', 'sample_rate', 'recording_mode',
                'silence_duration', 'min_duration', 'save_debug_audio'
            ],
            'post_processing': [
                'writing_key_press_delay', 'keyboard_simulator', 'enabled_scripts'
            ],
            'backend': [
                'model', 'compute_type', 'device', 'model_path', 'vad_filter',
                'condition_on_previous_text', 'base_url', 'api_key', 'temperature',
                'initial_prompt', 'use_streaming', 'min_transcription_interval',
                'vad_silence_duration'
            ]
        }

        # Get the section name from the section_path
        section_name = section_path.split('.')[-1]

        # Use the predefined order if available, otherwise use all keys
        ordered_keys = element_order.get(section_name, list(section.keys()))

        # Add elements in the specified order, then any remaining elements
        for key in ordered_keys + list(set(section.keys()) - set(ordered_keys)):
            if key in section:
                value = section[key]
                if isinstance(value, dict):
                    # This is a nested section, create a group box
                    group_box = QGroupBox(key.replace('_', ' ').capitalize())
                    group_layout = QVBoxLayout()
                    # Pass the nested section path to the next level
                    self.create_section_widgets(group_layout, value, f'{section_path}.{key}')
                    group_box.setLayout(group_layout)
                    layout.addWidget(group_box)
                else:
                    # This is a setting, create a widget for it
                    # Pass the full setting path to the widget
                    widget = self.create_setting_widget(f'{section_path}.{key}', value)
                    if widget:
                        layout.addWidget(widget)

    def create_setting_widget(self, config_key, value):
        widget = SettingWidget(config_key, value)
        return widget

    def create_add_profile_button(self):
        button = QPushButton("Add Profile")
        button.clicked.connect(self.add_profile)
        return button

    def add_profile(self):
        new_profile = ConfigManager.create_profile("New Profile")
        profile_name = new_profile['name']
        profile_tab = self.create_profile_tab(profile_name)
        self.tabs.addTab(profile_tab, profile_name)
        self.tabs.setCurrentIndex(self.tabs.count() - 1)  # Switch to the new tab

        # Update the active profiles widget
        self.update_active_profiles_widget()

    def delete_profile(self, profile_name):
        if self.tabs.count() <= 2:  # 1 for global options, 1 for the last profile
            QMessageBox.warning(self, 'Cannot Delete Profile',
                                'You cannot delete the last remaining profile.')
            return

        reply = QMessageBox.question(self, 'Delete Profile',
                                     f"Delete the profile '{profile_name}'?",
                                     QMessageBox.StandardButton.Yes |
                                     QMessageBox.StandardButton.No,
                                     QMessageBox.StandardButton.No)
        if reply == QMessageBox.StandardButton.Yes:
            if ConfigManager.delete_profile(profile_name):
                for i in range(self.tabs.count()):
                    if self.tabs.tabText(i) == profile_name:
                        self.tabs.removeTab(i)
                        break
                self.update_active_profiles_widget()
                QMessageBox.information(self, 'Profile Deleted',
                                        f'Profile "{profile_name}" has been deleted.')
            else:
                QMessageBox.warning(self, 'Cannot Delete Profile',
                                    'The profile could not be deleted. '
                                    'It may be the last remaining profile.')

    def update_active_profiles_widget(self):
        global_tab = self.tabs.widget(0)  # Assuming global options is always the first tab
        if global_tab and isinstance(global_tab, QScrollArea):
            scroll_content = global_tab.widget()
            if scroll_content and scroll_content.layout():
                for i in range(scroll_content.layout().count()):
                    widget = scroll_content.layout().itemAt(i).widget()
                    if (isinstance(widget, SettingWidget) and
                            widget.config_key == 'global_options.active_profiles'):
                        all_profiles = [profile['name']
                                        for profile in ConfigManager.get_profiles()]
                        active_profiles = ConfigManager.get_value('global_options.active_profiles')

                        # Create a new CheckboxListWidget with updated options
                        new_widget = CheckboxListWidget(all_profiles, active_profiles)
                        new_widget.optionsChanged.connect(widget.update_config)

                        # Replace the old widget with the new one
                        old_layout = widget.layout()
                        old_layout.replaceWidget(widget.input_widget, new_widget)
                        widget.input_widget.deleteLater()
                        widget.input_widget = new_widget
                        break

    def create_buttons(self, layout):
        button_layout = QHBoxLayout()
        save_button = QPushButton("Save")
        save_button.clicked.connect(self.save_settings)
        reset_button = QPushButton("Reset")
        reset_button.clicked.connect(self.reset_settings)
        button_layout.addWidget(save_button)
        button_layout.addWidget(reset_button)
        layout.addLayout(button_layout)

    def save_settings(self):
        ConfigManager.save_config()
        self.close()

    def reset_settings(self):
        ConfigManager.reload_config()
        self.create_tabs()  # Recreate all tabs to reflect the reset config

    def closeEvent(self, event):
        event.accept()


class SettingWidget(QWidget):
    def __init__(self, config_key, value):
        super().__init__()
        self.config_key = config_key
        self.value = value
        self.schema = ConfigManager.get_schema_for_key(config_key)
        self.init_ui()

    def init_ui(self):
        layout = QGridLayout()
        layout.setContentsMargins(0, 0, 0, 0)

        label_text = self.config_key.split('.')[-1].replace('_', ' ').capitalize()
        self.label = QLabel(label_text)

        self.input_widget = self.create_input_widget()

        help_button = QToolButton()
        help_button.setIcon(QIcon.fromTheme("help-contents"))
        help_button.clicked.connect(self.show_help)

        if isinstance(self.input_widget, CheckboxListWidget):
            layout.addWidget(self.label, 0, 0, Qt.AlignmentFlag.AlignTop)
            layout.addWidget(self.input_widget, 0, 1, Qt.AlignmentFlag.AlignTop)
            layout.addWidget(help_button, 0, 2, Qt.AlignmentFlag.AlignTop)

            # Adjust the internal layout of CheckboxListWidget
            checkbox_layout = self.input_widget.layout()
            checkbox_layout.setContentsMargins(0, 0, 0, 0)  # Remove any internal margins
            checkbox_layout.setSpacing(2)  # Reduce spacing between checkboxes
        else:
            layout.addWidget(self.label, 0, 0)
            layout.addWidget(self.input_widget, 0, 1)
            layout.addWidget(help_button, 0, 2)

        self.setLayout(layout)

    def create_input_widget(self):
        widget_type = self.schema.get('type')

        if widget_type == 'bool':
            return self.create_checkbox()
        elif widget_type == 'str' and 'options' in self.schema:
            return self.create_combobox()
        elif widget_type == 'int':
            return self.create_line_edit(QIntValidator())
        elif widget_type == 'float':
            return self.create_line_edit(QDoubleValidator())
        elif widget_type == 'int or null':
            return self.create_line_edit(QIntValidator(), allow_empty=True)
        elif widget_type == 'str':
            return self.create_line_edit()
        elif widget_type == 'list':
            return self.create_checkbox_list()
        elif widget_type == 'dir_path':
            return self.create_dir_path_widget()
        else:
            return QLabel(f"Unsupported type: {widget_type}")

    def create_checkbox_list(self):
        if self.config_key == 'global_options.active_profiles':
            options = [profile['name'] for profile in ConfigManager.get_profiles()]
        elif self.config_key.endswith('enabled_scripts'):
            options = self.get_available_scripts()
        else:
            options = self.schema.get('options', [])

        widget = CheckboxListWidget(options, self.value)
        widget.optionsChanged.connect(self.update_config)
        return widget

    def get_available_scripts(self):
        script_folder = 'scripts'  # Adjust this path as needed
        if os.path.exists(script_folder):
            return [f for f in os.listdir(script_folder) if f.endswith('.py')]
        return []

    def create_line_edit(self, validator=None, allow_empty=False):
        widget = QLineEdit()
        if validator:
            widget.setValidator(validator)
        if allow_empty:
            widget.setPlaceholderText("Auto")
        widget.setText(str(self.value) if self.value is not None else '')
        widget.editingFinished.connect(self.update_config)
        return widget

    def create_checkbox(self):
        widget = QCheckBox()
        widget.setChecked(bool(self.value))
        widget.stateChanged.connect(lambda state: self.update_config(state ==
                                                                     Qt.CheckState.Checked))
        return widget

    def create_combobox(self):
        widget = QComboBox()
        widget.addItems(self.schema['options'])
        widget.setCurrentText(str(self.value))
        widget.currentTextChanged.connect(self.update_config)
        return widget

    def create_list_widget(self):
        widget = QLineEdit()
        widget.setText(', '.join(map(str, self.value)))
        widget.editingFinished.connect(self.update_config)
        return widget

    def create_dir_path_widget(self):
        widget = QWidget()
        layout = QHBoxLayout(widget)
        layout.setContentsMargins(0, 0, 0, 0)

        line_edit = QLineEdit(self.value if self.value else '')
        browse_button = QPushButton("Browse")

        layout.addWidget(line_edit)
        layout.addWidget(browse_button)

        def browse_directory():
            directory = QFileDialog.getExistingDirectory(self, "Select Directory")
            if directory:
                line_edit.setText(directory)
                self.update_config(directory)

        browse_button.clicked.connect(browse_directory)
        line_edit.editingFinished.connect(lambda: self.update_config(line_edit.text()))

        return widget

    def update_config(self, value=None):
        if isinstance(self.input_widget, QWidget) and self.schema.get('type') == 'dir_path':
            line_edit = self.input_widget.findChild(QLineEdit)
            if line_edit:
                value = line_edit.text()
        elif isinstance(self.input_widget, CheckboxListWidget):
            if value is None:
                value = self.input_widget.get_selected_options()
        elif isinstance(self.input_widget, QCheckBox):
            value = self.input_widget.isChecked()
        elif isinstance(self.input_widget, QComboBox):
            value = self.input_widget.currentText()
        elif isinstance(self.input_widget, QLineEdit):
            if self.schema.get('type') == 'int':
                value = int(self.input_widget.text())
            elif self.schema.get('type') == 'float':
                value = float(self.input_widget.text())
            elif self.schema.get('type') == 'int or null':
                value = int(self.input_widget.text()) if self.input_widget.text() else None
            else:
                value = self.input_widget.text()

        ConfigManager.set_value(self.config_key, value)

    def show_help(self):
        QMessageBox.information(self, "Help", self.schema.get('description',
                                                              'No description available.'))


class CheckboxListWidget(QWidget):
    optionsChanged = pyqtSignal(list)

    def __init__(self, options, selected_options, parent=None):
        super().__init__(parent)
        self.options = options
        self.selected_options = selected_options
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout()
        self.checkboxes = {}

        for option in self.options:
            checkbox = QCheckBox(option)
            checkbox.setChecked(option in self.selected_options)
            checkbox.stateChanged.connect(self.update_selected_options)
            self.checkboxes[option] = checkbox
            layout.addWidget(checkbox)

        self.setLayout(layout)

    def update_selected_options(self):
        self.selected_options = [option for option, checkbox in self.checkboxes.items()
                                 if checkbox.isChecked()]
        self.optionsChanged.emit(self.selected_options)

    def get_selected_options(self):
        return self.selected_options


================================================
File: src/ui/status_window.py
================================================
import sys
import os
from PyQt6.QtCore import Qt
from PyQt6.QtGui import QFont, QPixmap
from PyQt6.QtWidgets import QApplication, QLabel, QHBoxLayout

from ui.base_window import BaseWindow

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))


class StatusWindow(BaseWindow):
    def __init__(self):
        """
        Initialize the status window.
        """
        super().__init__('WhisperWriter Status', 320, 120)
        self.setWindowFlags(Qt.WindowType.FramelessWindowHint | Qt.WindowType.WindowStaysOnTopHint
                            | Qt.WindowType.Tool | Qt.WindowType.WindowDoesNotAcceptFocus)

        status_layout = QHBoxLayout()
        status_layout.setContentsMargins(0, 0, 0, 0)

        self.icon_label = QLabel()
        self.icon_label.setFixedSize(32, 32)
        microphone_path = os.path.join('assets', 'microphone.png')
        pencil_path = os.path.join('assets', 'pencil.png')
        self.microphone_pixmap = QPixmap(
            microphone_path).scaled(32, 32, Qt.AspectRatioMode.KeepAspectRatio,
                                    Qt.TransformationMode.SmoothTransformation)
        self.pencil_pixmap = QPixmap(
            pencil_path).scaled(32, 32, Qt.AspectRatioMode.KeepAspectRatio,
                                Qt.TransformationMode.SmoothTransformation)
        self.icon_label.setPixmap(self.microphone_pixmap)
        self.icon_label.setAlignment(Qt.AlignmentFlag.AlignCenter)

        self.status_label = QLabel('Recording...')
        self.status_label.setFont(QFont('Segoe UI', 12))
        self.status_label.setStyleSheet("color: #505050;")

        status_layout.addStretch(1)
        status_layout.addWidget(self.icon_label)
        status_layout.addWidget(self.status_label)
        status_layout.addStretch(1)

        self.main_layout.addLayout(status_layout)

    def show(self):
        """
        Position the window in the bottom center of the screen and show it.
        """
        screen = QApplication.primaryScreen()
        screen_geometry = screen.geometry()
        screen_width = screen_geometry.width()
        screen_height = screen_geometry.height()
        window_width = self.width()
        window_height = self.height()

        x = (screen_width - window_width) // 2
        y = screen_height - window_height - 120

        self.move(x, y)
        self.setAttribute(Qt.WidgetAttribute.WA_ShowWithoutActivating)
        super().show()

    def show_message(self, message):
        """
        Update the status window based on the given status.
        """
        if 'recording' in message or 'streaming' in message:
            self.icon_label.setPixmap(self.microphone_pixmap)

        elif 'transcribing' in message:
            self.icon_label.setPixmap(self.pencil_pixmap)
        self.status_label.setText(message)
        self.show()

    def focusInEvent(self, event):
        self.clearFocus()
        event.ignore()


================================================
File: src/ui/tray_icon.py
================================================
import os
from PyQt6.QtWidgets import QSystemTrayIcon, QMenu, QApplication
from PyQt6.QtGui import QIcon, QAction
from PyQt6.QtCore import QObject, pyqtSignal


class TrayIcon(QObject):
    open_settings = pyqtSignal()
    close_app = pyqtSignal()

    def __init__(self):
        super().__init__()
        self.tray_icon = None
        self.create_tray_icon()

    def create_tray_icon(self):
        app = QApplication.instance()
        self.tray_icon = QSystemTrayIcon(QIcon(os.path.join('assets', 'ww-logo.png')), app)

        tray_menu = QMenu()

        settings_action = QAction('Open Settings', app)
        settings_action.triggered.connect(self.open_settings.emit)
        tray_menu.addAction(settings_action)

        exit_action = QAction('Exit', app)
        exit_action.triggered.connect(self.close_app.emit)
        tray_menu.addAction(exit_action)

        self.tray_icon.setContextMenu(tray_menu)

    def show(self):
        if self.tray_icon:
            self.tray_icon.show()

    def hide(self):
        if self.tray_icon:
            self.tray_icon.hide()


================================================
File: src/ui/ui_manager.py
================================================
from PyQt6.QtWidgets import QApplication, QMessageBox
from PyQt6.QtGui import QIcon

from ui.main_window import MainWindow
from ui.settings_window import SettingsWindow
from ui.status_window import StatusWindow
from ui.tray_icon import TrayIcon
from config_manager import ConfigManager


class UIManager:
    """
    The UIManager class is responsible for managing all user interface components of
    the application. It handles the creation and interaction of various windows (main, settings,
    status) and the system tray icon. This class serves as the central point for UI-related
    operations and events.
    """
    def __init__(self, event_bus):
        """Initialize the UIManager with the event bus."""
        self.event_bus = event_bus
        self.is_closing = False
        self.status_update_mode = "Window"

        self.main_window = MainWindow()
        self.settings_window = SettingsWindow()
        self.status_window = StatusWindow()
        self.tray_icon = TrayIcon()

        self.setup_connections()

    def setup_connections(self):
        """Establish connections between UI components and their corresponding actions."""
        self.main_window.open_settings.connect(self.settings_window.show)
        self.main_window.start_listening.connect(self.handle_start_listening)
        self.main_window.close_app.connect(self.initiate_close)
        self.tray_icon.open_settings.connect(self.settings_window.show)
        self.tray_icon.close_app.connect(self.initiate_close)
        self.event_bus.subscribe("quit_application", self.quit_application)
        self.event_bus.subscribe("profile_state_change", self.handle_profile_state_change)
        self.event_bus.subscribe("transcription_error", self.show_error_message)
        self.event_bus.subscribe("initialization_successful", self.hide_main_window)

    def show_main_window(self):
        """Display the main application window and show the system tray icon."""
        self.main_window.show()
        self.tray_icon.show()

    def handle_start_listening(self):
        """Handle the start listening event."""
        self.event_bus.emit("start_listening")

    def hide_main_window(self):
        """Hide the main window after successful initialization."""
        self.main_window.hide_main_window()

    def handle_profile_state_change(self, message):
        """Handle changes in profile states, updating status based on the chosen mode."""
        ConfigManager.log_print(message)
        if self.status_update_mode == "Window":
            self.show_status_window(message)
        elif self.status_update_mode == "Notification":
            self.show_notification(message)

    def show_status_window(self, message):
        """Display a status message in the status window."""
        if message:
            self.status_window.show_message(message)
        else:
            self.status_window.hide()

    def show_notification(self, message):
        """Display a desktop notification."""
        if not message:
            message = "Finished."

        self.tray_icon.tray_icon.showMessage(
            "WhisperWriter Status",
            message,
            QIcon(),
            3000
        )

    def show_error_message(self, message):
        """Display an error message in a QMessageBox."""
        ConfigManager.log_print(f"Transcription error: {message}")
        QMessageBox.critical(None, "Transcription Error", message)

    def show_settings_with_error(self, error_message: str):
        """Show the settings window with a detailed error message."""
        QMessageBox.critical(self.main_window, "Initialization Error", error_message)
        self.settings_window.show()
        self.main_window.show()

    def initiate_close(self):
        """Initiate the application closing process, ensuring it only happens once."""
        if not self.is_closing:
            self.is_closing = True
            self.event_bus.emit("close_app")

    def quit_application(self):
        """Quit the QApplication instance, effectively closing the application."""
        QApplication.instance().quit()

    def run_event_loop(self):
        """Start and run the Qt event loop, returning the exit code when finished."""
        return QApplication.instance().exec()


